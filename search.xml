<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>每日诤言</title>
    <url>/posts/daily/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="我的关注永远不是艺术，"><a href="#我的关注永远不是艺术，" class="headerlink" title="我的关注永远不是艺术，"></a>我的关注永远不是艺术，</h3><h3 id="但总是可以使用什么艺术。"><a href="#但总是可以使用什么艺术。" class="headerlink" title="但总是可以使用什么艺术。"></a>但总是可以使用什么艺术。</h3><h3 id="————格哈德·里希特"><a href="#————格哈德·里希特" class="headerlink" title="————格哈德·里希特"></a>————格哈德·里希特</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.10.18</p>
<a id="more"></a>


<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="人们理解杜尚花了100年时间，"><a href="#人们理解杜尚花了100年时间，" class="headerlink" title="人们理解杜尚花了100年时间，"></a>人们理解杜尚花了100年时间，</h3><h3 id="理解我估计要更久一点。"><a href="#理解我估计要更久一点。" class="headerlink" title="理解我估计要更久一点。"></a>理解我估计要更久一点。</h3><h3 id="————白南准"><a href="#————白南准" class="headerlink" title="————白南准"></a>————白南准</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.10.17</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="我肯定，"><a href="#我肯定，" class="headerlink" title="我肯定，"></a>我肯定，</h3><h3 id="在空无的中心，"><a href="#在空无的中心，" class="headerlink" title="在空无的中心，"></a>在空无的中心，</h3><h3 id="如同在人的心脏"><a href="#如同在人的心脏" class="headerlink" title="如同在人的心脏,"></a>如同在人的心脏,</h3><h3 id="有火在燃烧。"><a href="#有火在燃烧。" class="headerlink" title="有火在燃烧。"></a>有火在燃烧。</h3><h3 id="————伊夫·克莱因"><a href="#————伊夫·克莱因" class="headerlink" title="————伊夫·克莱因"></a>————伊夫·克莱因</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.10.16</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="随着年龄的增长，"><a href="#随着年龄的增长，" class="headerlink" title="随着年龄的增长，"></a>随着年龄的增长，</h3><h3 id="我想起了我们古老的文字、遗产和价值观。"><a href="#我想起了我们古老的文字、遗产和价值观。" class="headerlink" title="我想起了我们古老的文字、遗产和价值观。"></a>我想起了我们古老的文字、遗产和价值观。</h3><h3 id="它们中的任何一个都代表着一种完整的理解"><a href="#它们中的任何一个都代表着一种完整的理解" class="headerlink" title="它们中的任何一个都代表着一种完整的理解,"></a>它们中的任何一个都代表着一种完整的理解,</h3><h3 id="即唯一确定的是不确定。"><a href="#即唯一确定的是不确定。" class="headerlink" title="即唯一确定的是不确定。"></a>即唯一确定的是不确定。</h3><h3 id="————巴克里希纳·多西"><a href="#————巴克里希纳·多西" class="headerlink" title="————巴克里希纳·多西"></a>————巴克里希纳·多西</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.10.15</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="我们哭着降临世界，"><a href="#我们哭着降临世界，" class="headerlink" title="我们哭着降临世界，"></a>我们哭着降临世界，</h3><h3 id="却可以笑着走向永恒。"><a href="#却可以笑着走向永恒。" class="headerlink" title="却可以笑着走向永恒。"></a>却可以笑着走向永恒。</h3><h3 id="————如果国宝会说话"><a href="#————如果国宝会说话" class="headerlink" title="————如果国宝会说话"></a>————如果国宝会说话</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.10.14</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="他们说我是这镇子上的万人迷。"><a href="#他们说我是这镇子上的万人迷。" class="headerlink" title="他们说我是这镇子上的万人迷。"></a>他们说我是这镇子上的万人迷。</h3><h3 id="————弗兰克·扎帕"><a href="#————弗兰克·扎帕" class="headerlink" title="————弗兰克·扎帕"></a>————弗兰克·扎帕</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.10.13</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="风乍起。"><a href="#风乍起。" class="headerlink" title="风乍起。"></a>风乍起。</h3><h3 id="合当奋意向人生。"><a href="#合当奋意向人生。" class="headerlink" title="合当奋意向人生。"></a>合当奋意向人生。</h3><h3 id="————堀辰雄"><a href="#————堀辰雄" class="headerlink" title="————堀辰雄"></a>————堀辰雄</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.10.12</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="我的作品就是我的肉体和灵魂，"><a href="#我的作品就是我的肉体和灵魂，" class="headerlink" title="我的作品就是我的肉体和灵魂，"></a>我的作品就是我的肉体和灵魂，</h3><h3 id="为了它我甘愿冒失去生命和理智的危险。"><a href="#为了它我甘愿冒失去生命和理智的危险。" class="headerlink" title="为了它我甘愿冒失去生命和理智的危险。"></a>为了它我甘愿冒失去生命和理智的危险。</h3><h3 id="————文森特·威廉·梵·高"><a href="#————文森特·威廉·梵·高" class="headerlink" title="————文森特·威廉·梵·高"></a>————文森特·威廉·梵·高</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.10.11</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="抱歉，似乎是最难以启齿的话。"><a href="#抱歉，似乎是最难以启齿的话。" class="headerlink" title="抱歉，似乎是最难以启齿的话。"></a>抱歉，似乎是最难以启齿的话。</h3><h3 id="————雷·查尔斯"><a href="#————雷·查尔斯" class="headerlink" title="————雷·查尔斯"></a>————雷·查尔斯</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.10.10</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="历史学的目标并不是由过去视角出发展望未来。"><a href="#历史学的目标并不是由过去视角出发展望未来。" class="headerlink" title="历史学的目标并不是由过去视角出发展望未来。"></a>历史学的目标并不是由过去视角出发展望未来。</h3><h3 id="————埃里克·霍布斯鲍姆"><a href="#————埃里克·霍布斯鲍姆" class="headerlink" title="————埃里克·霍布斯鲍姆"></a>————埃里克·霍布斯鲍姆</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.10.9</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="和魔鬼共舞时，"><a href="#和魔鬼共舞时，" class="headerlink" title="和魔鬼共舞时，"></a>和魔鬼共舞时，</h3><h3 id="只能等着音乐结束。"><a href="#只能等着音乐结束。" class="headerlink" title="只能等着音乐结束。"></a>只能等着音乐结束。</h3><h3 id="————盖·里奇"><a href="#————盖·里奇" class="headerlink" title="————盖·里奇"></a>————盖·里奇</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.10.8</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="你了解星空下万物温馨的生长吗，"><a href="#你了解星空下万物温馨的生长吗，" class="headerlink" title="你了解星空下万物温馨的生长吗，"></a>你了解星空下万物温馨的生长吗，</h3><h3 id="你了解我们的存在吗，"><a href="#你了解我们的存在吗，" class="headerlink" title="你了解我们的存在吗，"></a>你了解我们的存在吗，</h3><h3 id="你已经遗失开启王国的钥匙了吗，"><a href="#你已经遗失开启王国的钥匙了吗，" class="headerlink" title="你已经遗失开启王国的钥匙了吗，"></a>你已经遗失开启王国的钥匙了吗，</h3><h3 id="你在轮回中反复降生一直活着吗，"><a href="#你在轮回中反复降生一直活着吗，" class="headerlink" title="你在轮回中反复降生一直活着吗，"></a>你在轮回中反复降生一直活着吗，</h3><h3 id="让我们彻底改造诸神，"><a href="#让我们彻底改造诸神，" class="headerlink" title="让我们彻底改造诸神，"></a>让我们彻底改造诸神，</h3><h3 id="包括各个时代的神话。"><a href="#包括各个时代的神话。" class="headerlink" title="包括各个时代的神话。"></a>包括各个时代的神话。</h3><h3 id="————吉姆·莫里森"><a href="#————吉姆·莫里森" class="headerlink" title="————吉姆·莫里森"></a>————吉姆·莫里森</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.10.7</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="声音在太空中消逝，"><a href="#声音在太空中消逝，" class="headerlink" title="声音在太空中消逝，"></a>声音在太空中消逝，</h3><h3 id="霞光变得昏暗。"><a href="#霞光变得昏暗。" class="headerlink" title="霞光变得昏暗。"></a>霞光变得昏暗。</h3><h3 id="永远沉默的世界里，"><a href="#永远沉默的世界里，" class="headerlink" title="永远沉默的世界里，"></a>永远沉默的世界里，</h3><h3 id="只有你和我交谈。"><a href="#只有你和我交谈。" class="headerlink" title="只有你和我交谈。"></a>只有你和我交谈。</h3><h3 id="————阿赫马托娃"><a href="#————阿赫马托娃" class="headerlink" title="————阿赫马托娃"></a>————阿赫马托娃</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.9.28</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="这几张脸在人群中幻境般闪现，"><a href="#这几张脸在人群中幻境般闪现，" class="headerlink" title="这几张脸在人群中幻境般闪现，"></a>这几张脸在人群中幻境般闪现，</h3><h3 id="湿漉漉的黑树枝上花瓣数点。"><a href="#湿漉漉的黑树枝上花瓣数点。" class="headerlink" title="湿漉漉的黑树枝上花瓣数点。"></a>湿漉漉的黑树枝上花瓣数点。</h3><h3 id="————埃兹拉·庞德"><a href="#————埃兹拉·庞德" class="headerlink" title="————埃兹拉·庞德"></a>————埃兹拉·庞德</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.9.27</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="热水澡肯定不能包治百病，"><a href="#热水澡肯定不能包治百病，" class="headerlink" title="热水澡肯定不能包治百病，"></a>热水澡肯定不能包治百病，</h3><h3 id="但我想例外也不会太多。"><a href="#但我想例外也不会太多。" class="headerlink" title="但我想例外也不会太多。"></a>但我想例外也不会太多。</h3><h3 id="每当我悲痛欲绝，"><a href="#每当我悲痛欲绝，" class="headerlink" title="每当我悲痛欲绝，"></a>每当我悲痛欲绝，</h3><h3 id="或者神经紧张、夜不成寐，"><a href="#或者神经紧张、夜不成寐，" class="headerlink" title="或者神经紧张、夜不成寐，"></a>或者神经紧张、夜不成寐，</h3><h3 id="意志消沉、萎靡不振，"><a href="#意志消沉、萎靡不振，" class="headerlink" title="意志消沉、萎靡不振，"></a>意志消沉、萎靡不振，</h3><h3 id="这时我就会对自己说："><a href="#这时我就会对自己说：" class="headerlink" title="这时我就会对自己说："></a>这时我就会对自己说：</h3><h3 id="洗个热水澡吧。"><a href="#洗个热水澡吧。" class="headerlink" title="洗个热水澡吧。"></a>洗个热水澡吧。</h3><h3 id="————西尔维娅·普拉斯"><a href="#————西尔维娅·普拉斯" class="headerlink" title="————西尔维娅·普拉斯"></a>————西尔维娅·普拉斯</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.9.26</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="当我回顾人类的历史，"><a href="#当我回顾人类的历史，" class="headerlink" title="当我回顾人类的历史，"></a>当我回顾人类的历史，</h3><h3 id="有时我觉得是一出喜剧，"><a href="#有时我觉得是一出喜剧，" class="headerlink" title="有时我觉得是一出喜剧，"></a>有时我觉得是一出喜剧，</h3><h3 id="但这喜剧让我哭泣；"><a href="#但这喜剧让我哭泣；" class="headerlink" title="但这喜剧让我哭泣；"></a>但这喜剧让我哭泣；</h3><h3 id="有时又觉得它是一出悲剧，"><a href="#有时又觉得它是一出悲剧，" class="headerlink" title="有时又觉得它是一出悲剧，"></a>有时又觉得它是一出悲剧，</h3><h3 id="但这悲剧却让我微笑。"><a href="#但这悲剧却让我微笑。" class="headerlink" title="但这悲剧却让我微笑。"></a>但这悲剧却让我微笑。</h3><h3 id="————特拉斯诺霍尔卡伊·拉斯洛"><a href="#————特拉斯诺霍尔卡伊·拉斯洛" class="headerlink" title="————特拉斯诺霍尔卡伊·拉斯洛"></a>————特拉斯诺霍尔卡伊·拉斯洛</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.9.25</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="就着几盏昏红的灯下，"><a href="#就着几盏昏红的灯下，" class="headerlink" title="就着几盏昏红的灯下，"></a>就着几盏昏红的灯下，</h3><h3 id="靠在几张旧床边，"><a href="#靠在几张旧床边，" class="headerlink" title="靠在几张旧床边，"></a>靠在几张旧床边，</h3><h3 id="我们就在这儿挥洒激情的汗水，"><a href="#我们就在这儿挥洒激情的汗水，" class="headerlink" title="我们就在这儿挥洒激情的汗水，"></a>我们就在这儿挥洒激情的汗水，</h3><h3 id="无论我们能从中收获怎样的音乐，"><a href="#无论我们能从中收获怎样的音乐，" class="headerlink" title="无论我们能从中收获怎样的音乐，"></a>无论我们能从中收获怎样的音乐，</h3><h3 id="我知道我们永不会忘。"><a href="#我知道我们永不会忘。" class="headerlink" title="我知道我们永不会忘。"></a>我知道我们永不会忘。</h3><h3 id="————深紫乐队"><a href="#————深紫乐队" class="headerlink" title="————深紫乐队"></a>————深紫乐队</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.9.24</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="很多人常说我受某某的影响，"><a href="#很多人常说我受某某的影响，" class="headerlink" title="很多人常说我受某某的影响，"></a>很多人常说我受某某的影响，</h3><h3 id="其实并无关连，"><a href="#其实并无关连，" class="headerlink" title="其实并无关连，"></a>其实并无关连，</h3><h3 id="认真说来只有盗窃而已。"><a href="#认真说来只有盗窃而已。" class="headerlink" title="认真说来只有盗窃而已。"></a>认真说来只有盗窃而已。</h3><h3 id="除了盗窃以外，"><a href="#除了盗窃以外，" class="headerlink" title="除了盗窃以外，"></a>除了盗窃以外，</h3><h3 id="别无其他，"><a href="#别无其他，" class="headerlink" title="别无其他，"></a>别无其他，</h3><h3 id="只不过其他人不敢说出来。"><a href="#只不过其他人不敢说出来。" class="headerlink" title="只不过其他人不敢说出来。"></a>只不过其他人不敢说出来。</h3><h3 id="————丸尾末广"><a href="#————丸尾末广" class="headerlink" title="————丸尾末广"></a>————丸尾末广</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.9.23</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="直线属于人类，"><a href="#直线属于人类，" class="headerlink" title="直线属于人类，"></a>直线属于人类，</h3><h3 id="曲线属于上帝。"><a href="#曲线属于上帝。" class="headerlink" title="曲线属于上帝。"></a>曲线属于上帝。</h3><h3 id="————安东尼·高迪"><a href="#————安东尼·高迪" class="headerlink" title="————安东尼·高迪"></a>————安东尼·高迪</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.9.22</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="以前人们似乎总是很明确地知道，"><a href="#以前人们似乎总是很明确地知道，" class="headerlink" title="以前人们似乎总是很明确地知道，"></a>以前人们似乎总是很明确地知道，</h3><h3 id="政府或者谁哪里哪里做得不对，"><a href="#政府或者谁哪里哪里做得不对，" class="headerlink" title="政府或者谁哪里哪里做得不对，"></a>政府或者谁哪里哪里做得不对，</h3><h3 id="于是一起针对问题示威游行。"><a href="#于是一起针对问题示威游行。" class="headerlink" title="于是一起针对问题示威游行。"></a>于是一起针对问题示威游行。</h3><h3 id="但是如今，我们为何愤怒，"><a href="#但是如今，我们为何愤怒，" class="headerlink" title="但是如今，我们为何愤怒，"></a>但是如今，我们为何愤怒，</h3><h3 id="完全是个谜。"><a href="#完全是个谜。" class="headerlink" title="完全是个谜。"></a>完全是个谜。</h3><h3 id="————李沧东"><a href="#————李沧东" class="headerlink" title="————李沧东"></a>————李沧东</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.9.21</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="一个故事之所以吸引我，"><a href="#一个故事之所以吸引我，" class="headerlink" title="一个故事之所以吸引我，"></a>一个故事之所以吸引我，</h3><h3 id="是因为它本身的价值，"><a href="#是因为它本身的价值，" class="headerlink" title="是因为它本身的价值，"></a>是因为它本身的价值，</h3><h3 id="而非我可以顾影自怜。"><a href="#而非我可以顾影自怜。" class="headerlink" title="而非我可以顾影自怜。"></a>而非我可以顾影自怜。</h3><h3 id="————奥逊·威尔斯"><a href="#————奥逊·威尔斯" class="headerlink" title="————奥逊·威尔斯"></a>————奥逊·威尔斯</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.9.20</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="不要问篝火该不该燃烧，"><a href="#不要问篝火该不该燃烧，" class="headerlink" title="不要问篝火该不该燃烧，"></a>不要问篝火该不该燃烧，</h3><h3 id="先问寒冷黑暗还在不在；"><a href="#先问寒冷黑暗还在不在；" class="headerlink" title="先问寒冷黑暗还在不在；"></a>先问寒冷黑暗还在不在；</h3><h3 id="不要问子弹该不该上膛，"><a href="#不要问子弹该不该上膛，" class="headerlink" title="不要问子弹该不该上膛，"></a>不要问子弹该不该上膛，</h3><h3 id="先问压迫剥削还在不在；"><a href="#先问压迫剥削还在不在；" class="headerlink" title="先问压迫剥削还在不在；"></a>先问压迫剥削还在不在；</h3><h3 id="不要问正义事业有没有明天，"><a href="#不要问正义事业有没有明天，" class="headerlink" title="不要问正义事业有没有明天，"></a>不要问正义事业有没有明天，</h3><h3 id="先问人间不平今天还在不在。"><a href="#先问人间不平今天还在不在。" class="headerlink" title="先问人间不平今天还在不在。"></a>先问人间不平今天还在不在。</h3><h3 id="————切·格瓦拉"><a href="#————切·格瓦拉" class="headerlink" title="————切·格瓦拉"></a>————切·格瓦拉</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>2020.9.19</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>daily</tag>
      </tags>
  </entry>
  <entry>
    <title>每天一遍，初恋再见</title>
    <url>/posts/chulian/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h2 id="lsp每日必刷"><a href="#lsp每日必刷" class="headerlink" title="lsp每日必刷"></a><strong>lsp每日必刷</strong></h2>
            <i class="fa fa-quote-right"></i>
          </blockquote>

<a id="more"></a> 
<h3 id="央视主持王冰冰"><a href="#央视主持王冰冰" class="headerlink" title="央视主持王冰冰"></a><strong><center>央视主持王冰冰</center></strong></h3><video src="http://qh04sczlg.hd-bkt.clouddn.com/wangbingbing.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/wangbingbing.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>


<h3 id="狗儿-青鸟"><a href="#狗儿-青鸟" class="headerlink" title="狗儿 青鸟"></a><strong><center>狗儿 青鸟</center></strong></h3><video src="http://qh04sczlg.hd-bkt.clouddn.com/qingniao.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/qingniao.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>


<h3 id="绿婆娘"><a href="#绿婆娘" class="headerlink" title="绿婆娘"></a><strong><center>绿婆娘</center></strong></h3> <video src="http://qh04sczlg.hd-bkt.clouddn.com/wufa.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/wufa.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>


<h3 id="我老婆十元里美"><a href="#我老婆十元里美" class="headerlink" title="我老婆十元里美"></a><strong><center>我老婆十元里美</center></strong></h3><video src="http://qh04sczlg.hd-bkt.clouddn.com/shiyuan.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/shiyuan.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>


<h3 id="好多好多"><a href="#好多好多" class="headerlink" title="好多好多"></a><strong><center>好多好多</center></strong></h3><video src="http://qh04sczlg.hd-bkt.clouddn.com/oumei.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/oumei.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>


<h3 id="狗儿-红莲华"><a href="#狗儿-红莲华" class="headerlink" title="狗儿 红莲华"></a><strong><center>狗儿 红莲华</center></strong></h3> <video src="http://qh04sczlg.hd-bkt.clouddn.com/honglianhua.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/honglianhua.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>


<h3 id="成果成果成狗"><a href="#成果成果成狗" class="headerlink" title="成果成果成狗"></a><strong><center>成果成果成狗</center></strong></h3> <video src="http://qh04sczlg.hd-bkt.clouddn.com/gouge.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/gouge.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>


<h3 id="西野七濑"><a href="#西野七濑" class="headerlink" title="西野七濑"></a><strong><center>西野七濑</center></strong></h3> <video src="http://qh04sczlg.hd-bkt.clouddn.com/xiye.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/xiye.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>


<h3 id="罗翔老师-张拉三巴"><a href="#罗翔老师-张拉三巴" class="headerlink" title="罗翔老师 张拉三巴"></a><strong><center>罗翔老师 张拉三巴</center></strong></h3><video src="http://qh04sczlg.hd-bkt.clouddn.com/zhangsan.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/zhangsan.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>


<h3 id="超度你的心灵"><a href="#超度你的心灵" class="headerlink" title="超度你的心灵"></a><strong><center>超度你的心灵</center></strong></h3><video src="http://qh04sczlg.hd-bkt.clouddn.com/fuoxi.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/fuoxi.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>


<h3 id="同光十三绝"><a href="#同光十三绝" class="headerlink" title="同光十三绝"></a><strong><center>同光十三绝</center></strong></h3> <video src="http://qh04sczlg.hd-bkt.clouddn.com/shisanjue.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/shisanjue.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>

]]></content>
      <categories>
        <category>生活</category>
        <category>视频</category>
      </categories>
      <tags>
        <tag>daily</tag>
        <tag>video</tag>
        <tag>wife</tag>
      </tags>
  </entry>
  <entry>
    <title>php超级全局变量</title>
    <url>/posts/php-5superglobal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　PHP中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的全部作用域中都可用。 你不需要特别说明，就可以在函数及类中使用。</p>
<blockquote>
<p><a href="https://www.runoob.com/php/php-superglobals.html">详细介绍</a></p>
</blockquote>
<a id="more"></a>
<h1 id="PHP-超级全局变量列表"><a href="#PHP-超级全局变量列表" class="headerlink" title="PHP 超级全局变量列表:"></a>PHP 超级全局变量列表:</h1><ul>
<li>$GLOBALS</li>
<li>$_SERVER</li>
<li>$_REQUEST</li>
<li>$_POST</li>
<li>$_GET</li>
<li>$_FILES</li>
<li>$_ENV</li>
<li>$_COOKIE</li>
<li>$_SESSION</li>
</ul>
<h1 id="本文具体介绍-POST和-GET"><a href="#本文具体介绍-POST和-GET" class="headerlink" title="本文具体介绍$_POST和$_GET"></a>本文具体介绍$_POST和$_GET</h1><h2 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h2><p>　　PHP $_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”post”。</p>
<p>　　以下实例显示了两个输入字段（input）及提交按钮(submit)的表单(form)。 当用户通过点击 “Submit” 按钮提交表单数据时, 表单数据将发送至<form>标签中 action 属性中指定的脚本文件。 在这个实例中，我们指定文件来处理表单数据。如果你希望其他的PHP文件来处理该数据，你可以修改该指定的脚本文件名。 然后，我们可以使用超级全局变量 $_POST 来收集表单中的 input 字段数据:</form></p>
<h3 id="form-html-文件代码："><a href="#form-html-文件代码：" class="headerlink" title="form.html 文件代码："></a>form.html 文件代码：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;welcome.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span>&gt;</span></span><br><span class="line">年龄: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>　　当用户填写完上面的表单并点击提交按钮时，表单的数据会被送往名为 “welcome.php” 的 PHP 文件：</p>
<h3 id="welcome-php-文件代码："><a href="#welcome-php-文件代码：" class="headerlink" title="welcome.php 文件代码："></a>welcome.php 文件代码：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">欢迎<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_POST[<span class="string">&quot;fname&quot;</span>]; <span class="meta">?&gt;</span>!&lt;br&gt;</span><br><span class="line">你的年龄是 <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_POST[<span class="string">&quot;age&quot;</span>]; <span class="meta">?&gt;</span>  岁。</span><br></pre></td></tr></table></figure>

<h2 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h2><p>　　PHP $_GET 同样被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”get”。</p>
<p>　　$_GET 也可以收集URL中发送的数据。</p>
<h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;test_get.php?subject=PHP&amp;web=runoob.com&quot;</span>&gt;</span>Test $GET<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>　　当用户点击链接 “Test $GET”, 参数 “subject” 和 “web” 将发送至”test_get.php”,你可以在 “test_get.php” 文件中使用 $_GET 变量来获取这些数据。</p>
<h3 id="test-get-php"><a href="#test-get-php" class="headerlink" title="test_get.php"></a>test_get.php</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Study &quot;</span> . $_GET[<span class="string">&#x27;subject&#x27;</span>] . <span class="string">&quot; @ &quot;</span> . $_GET[<span class="string">&#x27;web&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php数组</title>
    <url>/posts/php-4array/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note ">
            <p><a href="https://www.runoob.com/php/php-ref-array.html">数组相关函数</a></p>
          </div>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ul>
<li>数值数组 - 带有数字 ID 键的数组</li>
<li>关联数组 - 带有指定的键的数组，每个键关联一个值</li>
<li>多维数组 - 包含一个或多个数组的数组<a id="more"></a>

</li>
</ul>
<h2 id="数值数组"><a href="#数值数组" class="headerlink" title="数值数组"></a>数值数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol>
<li>自动分配 ID 键<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$cars=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>人工分配 ID 键：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$cars[<span class="number">0</span>]=<span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">$cars[<span class="number">1</span>]=<span class="string">&quot;BMW&quot;</span>;</span><br><span class="line">$cars[<span class="number">2</span>]=<span class="string">&quot;Toyota&quot;</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="count-函数"><a href="#count-函数" class="headerlink" title="count() 函数"></a>count() 函数</h3><p>返回数组元素数量</p>
<h2 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ol>
<li><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$age=<span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Ben&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Joe&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$age[<span class="string">&#x27;Peter&#x27;</span>]=<span class="string">&quot;35&quot;</span>;</span><br><span class="line">$age[<span class="string">&#x27;Ben&#x27;</span>]=<span class="string">&quot;37&quot;</span>;</span><br><span class="line">$age[<span class="string">&#x27;Joe&#x27;</span>]=<span class="string">&quot;43&quot;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="遍历关联数组"><a href="#遍历关联数组" class="headerlink" title="遍历关联数组"></a>遍历关联数组</h3>遍历并打印关联数组中的所有值，您可以使用 foreach 循环，如下所示：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$age=<span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Ben&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Joe&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span>($age <span class="keyword">as</span> $x=&gt;$x_value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Key=&quot;</span> . $x . <span class="string">&quot;, Value=&quot;</span> . $x_value;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h1><ul>
<li>sort() - 对数组进行升序排列</li>
<li>rsort() - 对数组进行降序排列</li>
<li>asort() - 根据关联数组的值，对数组进行升序排列</li>
<li>ksort() - 根据关联数组的键，对数组进行升序排列</li>
<li>arsort() - 根据关联数组的值，对数组进行降序排列</li>
<li>krsort() - 根据关联数组的键，对数组进行降序排列</li>
</ul>
]]></content>
      <categories>
        <category>frontend</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php运算符</title>
    <url>/posts/php-3oprator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><blockquote>
<p>大多与c语言相同</p>
</blockquote>
<h2 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h2><h3 id><a href="#" class="headerlink" title="==="></a>===</h3><p>绝对等于，如果 x 等于 y，且它们类型相同，则返回true。如5===”5” 返回 false</p>
<h3 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;&gt;"></a>&lt;&gt;</h3><p>不等于，如果 x 不等于 y，则返回 true。如5&lt;&gt;8 返回 true </p>
<h3 id="-1"><a href="#-1" class="headerlink" title="!=="></a>!==</h3><p>绝对不等于，如果 x 不等于 y，或它们类型不相同，则返回 true。5!==”5” 返回 true</p>
<a id="more"></a>

<h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(expr1) ? (expr2) : (expr3) </span><br></pre></td></tr></table></figure>
<p>　　对 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 FALSE 时的值为 expr3。</p>
<p>　　自 PHP 5.3 起，可以省略三元运算符中间那部分。表达式 expr1 ?: expr3 在 expr1 求值为 TRUE 时返回 expr1，否则返回 expr3。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>　　以下实例中通过判断 $_GET 请求中含有 user 值，如果有返回 $_GET[‘user’]，否则返回 nobody：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$test = <span class="string">&#x27;菜鸟教程&#x27;</span>;</span><br><span class="line"><span class="comment">// 普通写法</span></span><br><span class="line">$username = <span class="keyword">isset</span>($test) ? $test : <span class="string">&#x27;nobody&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $username, PHP_EOL;　<span class="comment">//注意：PHP_EOL 是一个换行符，兼容更大平台。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// PHP 5.3+ 版本写法</span></span><br><span class="line">$username = $test ?: <span class="string">&#x27;nobody&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $username, PHP_EOL;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="组合比较符-PHP7"><a href="#组合比较符-PHP7" class="headerlink" title="组合比较符(PHP7+)"></a>组合比较符(PHP7+)</h1><p>　　PHP7+ 支持组合比较符（combined comparison operator）也称之为太空船操作符，符号为 &lt;=&gt;。组合比较运算符可以轻松实现两个变量的比较，当然不仅限于数值类数据的比较。</p>
<p>语法格式如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$c = $a &lt;=&gt; $b;</span><br></pre></td></tr></table></figure>
<p>解析如下：</p>
<p>如果 $a &gt; $b, 则 $c 的值为 1。<br>如果 $a == $b, 则 $c 的值为 0。<br>如果 $a &lt; $b, 则 $c 的值为 -1。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php EOF的使用</title>
    <url>/posts/php-2EOF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>　　PHP EOF(heredoc)是一种在命令行shell（如sh、csh、ksh、bash、PowerShell和zsh）和程序语言（像Perl、PHP、Python和Ruby）里定义一个字符串的方法。</p>
</blockquote>
<a id="more"></a>

<p>使用概述：</p>
<ol>
<li>必须后接分号，否则编译通不过。</li>
<li>EOF 可以用任意其它字符代替，只需保证结束标识与开始标识一致。</li>
<li>结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。</li>
<li>开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号。</li>
<li>当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义，此处相当与q和qq的用法。</li>
</ol>
<p>实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> &lt;&lt;&lt;JK <span class="comment">//JK可以用任何字符串代替，需要与后面一致</span></span><br><span class="line">        &lt;h1&gt;我的第一个标题&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line">JK;</span><br><span class="line"><span class="comment">// 结束需要独立一行且前后不能空格</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>frontend</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php变量和常量</title>
    <url>/posts/php-1var/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PHP-变量作用域"><a href="#PHP-变量作用域" class="headerlink" title="PHP 变量作用域"></a>PHP 变量作用域</h1><p>变量的作用域是脚本中变量可被引用/使用的部分。<br>PHP 有四种不同的变量作用域：</p>
<ul>
<li>local</li>
<li>global</li>
<li>static</li>
<li>parameter<a id="more"></a>

</li>
</ul>
<h2 id="local"><a href="#local" class="headerlink" title="local"></a>local</h2><p>　　默认情况下函数内部声明的变量皆为局部变量，仅在函数内部访问。</p>
<h2 id="global"><a href="#global" class="headerlink" title="global"></a>global</h2><ol>
<li>global 关键字用于函数内访问全局变量。</li>
</ol>
<p>　　在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上 global 关键字：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="number">5</span>;</span><br><span class="line">$y=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $x,$y;</span><br><span class="line">    $y=$x+$y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">echo</span> $y; <span class="comment">// 输出 15</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>PHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中。 index 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。</li>
</ol>
<p>　　上面的实例可以写成这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="number">5</span>;</span><br><span class="line">$y=<span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $GLOBALS[<span class="string">&#x27;y&#x27;</span>]=$GLOBALS[<span class="string">&#x27;x&#x27;</span>]+$GLOBALS[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">echo</span> $y;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>局部变量在函数结束后不删除，且static语句只执行一次。</p>
<h2 id="parameter"><a href="#parameter" class="headerlink" title="parameter"></a>parameter</h2><p>参数在函数调用时被传递进函数内。</p>
<h1 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h1><ul>
<li>字符串连接用’.’</li>
<li>strlen() 函数返回字符串长度</li>
<li>strpos() 函数在字符串内查找一个字符或一段指定的文本，strpos(“Hello world!”,”world”)返回6。</li>
</ul>
<p><a href="https://www.runoob.com/php/php-ref-string.html">字符串函数</a></p>
<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><h2 id="设置常量，使用-define-函数，函数语法如下："><a href="#设置常量，使用-define-函数，函数语法如下：" class="headerlink" title="设置常量，使用 define() 函数，函数语法如下："></a>设置常量，使用 define() 函数，函数语法如下：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> define ( <span class="keyword">string</span> $name , mixed $value [, <span class="keyword">bool</span> $case_insensitive = <span class="literal">false</span> ] )</span><br></pre></td></tr></table></figure>
<p>该函数有三个参数:</p>
<ul>
<li>name：必选参数，常量名称，即标志符。</li>
<li>value：必选参数，常量的值。</li>
<li>case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。</li>
</ul>
<p>以下实例我们创建一个 区分大小写的常量, 常量值为 “欢迎访问 Runoob.com”：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 区分大小写的常量名</span></span><br><span class="line">define(<span class="string">&quot;GREETING&quot;</span>, <span class="string">&quot;欢迎访问 Runoob.com&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> GREETING;    <span class="comment">// 输出 &quot;欢迎访问 Runoob.com&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> greeting;   <span class="comment">// 输出 &quot;greeting&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常量是全局的"><a href="#常量是全局的" class="headerlink" title="常量是全局的"></a>常量是全局的</h2><p>可以在整个脚本的任何地方使用</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>起风了</title>
    <url>/posts/suibi1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <h3 id="風立ちぬ、"><a href="#風立ちぬ、" class="headerlink" title="風立ちぬ、"></a>風立ちぬ、</h3><h3 id="いざ行きめやも。"><a href="#いざ行きめやも。" class="headerlink" title="いざ行きめやも。"></a>いざ行きめやも。</h3><h3 id="————堀辰雄《風立ちぬ》"><a href="#————堀辰雄《風立ちぬ》" class="headerlink" title="————堀辰雄《風立ちぬ》"></a>————堀辰雄《風立ちぬ》</h3>
            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>

<h1 id="病人と愛にする"><a href="#病人と愛にする" class="headerlink" title="病人と愛にする"></a>病人と愛にする</h1><p>　　这究竟是怎样的一种情感，能让你明知道对方时日无多，却仍满怀期待地陪她在疗养院中度过她最后的时光。<br>　　那女子是这样的柔弱，又是如此温柔，让所有与她接触过的人都不禁想要轻抚她的额头。就如同冬日的雪地里长出的一朵稚嫩小野花，她的出现给人带来美好稍纵即逝的绝望，却又让人在她生命的最后一刻忍不住想用双手包裹，直至凋零。</p>
<blockquote>
<p>　　那是些欢愉的日子，欢愉得令人黯然神伤。<br>　　就如同早在我俩初次相遇两年之前的那个夏日里我于漫不经意间脱口而出、从此以后便喜欢上了它、无缘无故地常要浅吟低诵的“风乍起。合当奋意向人生。”那行诗句一般，分明忘怀已久，却又悄然苏生————可谓是早于人生之先、远比人生本身更为鲜活的日子。</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言defer语句</title>
    <url>/posts/go-18defer/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>本文转载自：<br>作者：simpleapples<br>链接：<a href="https://www.jianshu.com/p/79c029c0bd58">https://www.jianshu.com/p/79c029c0bd58</a><br>来源：简书</p>
          </div>

<h1 id="语句介绍"><a href="#语句介绍" class="headerlink" title="语句介绍"></a>语句介绍</h1><p>defer语句是Go中一个非常有用的特性，可以将一个方法延迟到包裹该方法的方法返回时执行，在实际应用中，defer语句可以充当其他语言中try…catch…的角色，也可以用来处理关闭文件句柄等收尾操作。</p>
<a id="more"></a>

<h1 id="触发时机"><a href="#触发时机" class="headerlink" title="触发时机"></a>触发时机</h1><ul>
<li>包裹defer的函数返回时</li>
<li>包裹defer的函数执行到末尾时</li>
<li>所在的goroutine发生panic时</li>
</ul>
<h1 id="defer执行顺序"><a href="#defer执行顺序" class="headerlink" title="defer执行顺序"></a>defer执行顺序</h1><p>当一个方法中有多个defer时， defer会将要延迟执行的方法“压栈”，当defer被触发时，将所有“压栈”的方法“出栈”并执行。所以defer的执行顺序是LIFO的。</p>
<p>所以下面这段代码的输出不是1 2 3，而是3 2 1。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stackingDefers</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><h2 id="坑1：defer在匿名返回值和命名返回值函数中的不同表现"><a href="#坑1：defer在匿名返回值和命名返回值函数中的不同表现" class="headerlink" title="坑1：defer在匿名返回值和命名返回值函数中的不同表现"></a>坑1：defer在匿名返回值和命名返回值函数中的不同表现</h2><p>先看下面两个方法执行的结果。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnValues</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        result++</span><br><span class="line">        fmt.Println(<span class="string">&quot;defer&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">namedReturnValues</span><span class="params">()</span> <span class="params">(result <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        result++</span><br><span class="line">        fmt.Println(<span class="string">&quot;defer&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的方法会输出0，下面的方法输出1。上面的方法使用了匿名返回值，下面的使用了命名返回值，除此之外其他的逻辑均相同，为什么输出的结果会有区别呢？</p>
<p>要搞清这个问题首先需要了解defer的执行逻辑，文档中说defer语句在方法返回“时”触发，也就是说return和defer是“同时”执行的。以匿名返回值方法举例，过程如下。</p>
<ul>
<li>将result赋值给返回值（可以理解成Go自动创建了一个返回值retValue，相当于执行retValue = result）</li>
<li>然后检查是否有defer，如果有则执行</li>
<li>返回刚才创建的返回值（retValue）</li>
</ul>
<p>在这种情况下，defer中的修改是对result执行的，而不是retValue，所以defer返回的依然是retValue。在命名返回值方法中，由于返回值在方法定义时已经被定义，所以没有创建retValue的过程，result就是retValue，defer对于result的修改也会被直接返回。</p>
<h2 id="坑2：在for循环中使用defer可能导致的性能问题"><a href="#坑2：在for循环中使用defer可能导致的性能问题" class="headerlink" title="坑2：在for循环中使用defer可能导致的性能问题"></a>坑2：在for循环中使用defer可能导致的性能问题</h2><p>看下面的代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferInLoops</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        f, _ := os.Open(<span class="string">&quot;/etc/hosts&quot;</span>)</span><br><span class="line">        <span class="keyword">defer</span> f.Close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>defer在紧邻创建资源的语句后生命力，看上去逻辑没有什么问题。但是和直接调用相比，defer的执行存在着额外的开销，例如defer会对其后需要的参数进行内存拷贝，还需要对defer结构进行压栈出栈操作。所以在循环中定义defer可能导致大量的资源开销，在本例中，可以将f.Close()语句前的defer去掉，来减少大量defer导致的额外资源消耗。</p>
<h2 id="坑3：判断执行没有err之后，再defer释放资源"><a href="#坑3：判断执行没有err之后，再defer释放资源" class="headerlink" title="坑3：判断执行没有err之后，再defer释放资源"></a>坑3：判断执行没有err之后，再defer释放资源</h2><p>一些获取资源的操作可能会返回err参数，我们可以选择忽略返回的err参数，但是如果要使用defer进行延迟释放的的话，需要在使用defer之前先判断是否存在err，如果资源没有获取成功，即没有必要也不应该再对资源执行释放操作。如果不判断获取资源是否成功就执行释放操作的话，还有可能导致释放方法执行错误。</p>
<p>正确写法如下。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">resp, err := http.Get(url)</span><br><span class="line"><span class="comment">// 先判断操作是否成功</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果操作成功，再进行Close操作</span></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br></pre></td></tr></table></figure>

<h2 id="坑4：调用os-Exit时defer不会被执行"><a href="#坑4：调用os-Exit时defer不会被执行" class="headerlink" title="坑4：调用os.Exit时defer不会被执行"></a>坑4：调用os.Exit时defer不会被执行</h2><p>当发生panic时，所在goroutine的所有defer会被执行，但是当调用os.Exit()方法退出程序时，defer并不会被执行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferExit</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;defer&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的defer并不会输出。</p>
]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言并发</title>
    <url>/posts/go-17bingfa/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Go 语言支持并发，我们只需要通过 go 关键字来开启 goroutine 即可。</p>
<h1 id="goroutine-语法格式："><a href="#goroutine-语法格式：" class="headerlink" title="goroutine 语法格式："></a>goroutine 语法格式：</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> 函数名( 参数列表 )</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="通道（channel）"><a href="#通道（channel）" class="headerlink" title="通道（channel）"></a>通道（channel）</h1><p>通道（channel）是用来传递数据的一个数据结构。</p>
<p>通道可用于两个 goroutine 之间通过传递一个指定类型的值来同步运行和通讯。操作符 &lt;- 用于指定通道的方向，发送或接收。如果未指定方向，则为双向通道。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch &lt;- v    <span class="comment">// 把 v 发送到通道 ch</span></span><br><span class="line">v := &lt;-ch  <span class="comment">// 从 ch 接收数据</span></span><br><span class="line">           <span class="comment">// 并把值赋给 v</span></span><br></pre></td></tr></table></figure>
<p>声明一个通道很简单，我们使用chan关键字即可，通道在使用前必须先创建：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br></pre></td></tr></table></figure>

<h1 id="通道缓冲区"><a href="#通道缓冲区" class="headerlink" title="通道缓冲区"></a>通道缓冲区</h1><p>通道可以设置缓冲区，通过 make 的第二个参数指定缓冲区大小：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p>带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态，就是说发送端发送的数据可以放在缓冲区里面，可以等待接收端去获取数据，而不是立刻需要接收端去获取数据。</p>
<p>不过由于缓冲区的大小是有限的，所以还是必须有接收端来接收数据的，否则缓冲区一满，数据发送端就无法再发送数据了。</p>
<div class="note info">
            <p>注意：如果通道不带缓冲，发送方会阻塞直到接收方从通道中接收了值。如果通道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。接收方在有值可以接收之前会一直阻塞。</p>
          </div>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 这里我们定义了一个可以存储整数类型的带缓冲通道</span></span><br><span class="line">        <span class="comment">// 缓冲区大小为2</span></span><br><span class="line">        ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 因为 ch 是带缓冲的通道，我们可以同时发送两个数据</span></span><br><span class="line">        <span class="comment">// 而不用立刻需要去同步读取数据</span></span><br><span class="line">        ch &lt;- <span class="number">1</span></span><br><span class="line">        ch &lt;- <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取这两个数据</span></span><br><span class="line">        fmt.Println(&lt;-ch)</span><br><span class="line">        fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h1 id="Go-遍历通道与关闭通道"><a href="#Go-遍历通道与关闭通道" class="headerlink" title="Go 遍历通道与关闭通道"></a>Go 遍历通道与关闭通道</h1><p>Go 通过 range 关键字来实现遍历读取到的数据，类似于与数组或切片。格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v, ok := &lt;-ch</span><br></pre></td></tr></table></figure>
<p>如果通道接收不到数据后 ok 就为 false，这时通道就可以使用 close() 函数来关闭。</p>
<p>实例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        x, y := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">                c &lt;- x</span><br><span class="line">                x, y = y, x+y</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c)</span><br><span class="line">    <span class="comment">// range 函数遍历每个从通道接收到的数据，因为 c 在发送完 10 个</span></span><br><span class="line">    <span class="comment">// 数据之后就关闭了通道，所以这里我们 range 函数在接收到 10 个数据</span></span><br><span class="line">    <span class="comment">// 之后就结束了。如果上面的 c 通道不关闭，那么 range 函数就不</span></span><br><span class="line">    <span class="comment">// 会结束，从而在接收第 11 个数据的时候就阻塞了。</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</span><br><span class="line">            fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">13</span><br><span class="line">21</span><br><span class="line">34</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言错误处理</title>
    <url>/posts/go-16error/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Go 语言通过内置的错误接口提供了非常简单的错误处理机制。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>error类型是一个接口类型，这是它的定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h1><p>我们可以在编码中通过实现 error 接口类型来生成错误信息。</p>
<p>函数通常在最后的返回值中返回错误信息。使用errors.New 可返回一个错误信息：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(f <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">&quot;math: square root of negative number&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在下面的例子中，我们在调用Sqrt的时候传递的一个负数，然后就得到了non-nil的error对象，将此对象与nil比较，结果为true，所以fmt.Println(fmt包在处理error时会调用Error方法)被调用，以输出错误，请看下面调用的示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">result, err:= Sqrt(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="再来个栗子"><a href="#再来个栗子" class="headerlink" title="再来个栗子"></a>再来个栗子</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个 DivideError 结构</span></span><br><span class="line"><span class="keyword">type</span> DivideError <span class="keyword">struct</span> &#123;</span><br><span class="line">    dividee <span class="keyword">int</span></span><br><span class="line">    divider <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 `error` 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(de *DivideError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    strFormat := <span class="string">`</span></span><br><span class="line"><span class="string">    Cannot proceed, the divider is zero.</span></span><br><span class="line"><span class="string">    dividee: %d</span></span><br><span class="line"><span class="string">    divider: 0</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(strFormat, de.dividee)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 `int` 类型除法运算的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Divide</span><span class="params">(varDividee <span class="keyword">int</span>, varDivider <span class="keyword">int</span>)</span> <span class="params">(result <span class="keyword">int</span>, errorMsg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> varDivider == <span class="number">0</span> &#123;</span><br><span class="line">            dData := DivideError&#123;</span><br><span class="line">                    dividee: varDividee,</span><br><span class="line">                    divider: varDivider,</span><br><span class="line">            &#125;</span><br><span class="line">            errorMsg = dData.Error()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> varDividee / varDivider, <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常情况</span></span><br><span class="line">    <span class="keyword">if</span> result, errorMsg := Divide(<span class="number">100</span>, <span class="number">10</span>); errorMsg == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;100/10 = &quot;</span>, result)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当除数为零的时候会返回错误信息</span></span><br><span class="line">    <span class="keyword">if</span> _, errorMsg := Divide(<span class="number">100</span>, <span class="number">0</span>); errorMsg != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;errorMsg is: &quot;</span>, errorMsg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行以上程序，输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100&#x2F;10 &#x3D;  10</span><br><span class="line">errorMsg is:  </span><br><span class="line">    Cannot proceed, the divider is zero.</span><br><span class="line">    dividee: 100</span><br><span class="line">    divider: 0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言接口</title>
    <url>/posts/go-15interface/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。</p>
<a id="more"></a>
<p>实例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">interface</span> &#123;    <span class="comment">//接口定义</span></span><br><span class="line">    call()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NokiaPhone <span class="keyword">struct</span> &#123;    <span class="comment">//结构体定义</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(nokiaPhone NokiaPhone)</span> <span class="title">call</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;I am Nokia, I can call you!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPhone <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(iPhone IPhone)</span> <span class="title">call</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;I am iPhone, I can call you!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> phone Phone</span><br><span class="line"></span><br><span class="line">    phone = <span class="built_in">new</span>(NokiaPhone)</span><br><span class="line">    phone.call()</span><br><span class="line"></span><br><span class="line">    phone = <span class="built_in">new</span>(IPhone)</span><br><span class="line">    phone.call()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客将链接自动提交百度</title>
    <url>/posts/baidu-push/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>试过多种方法，发现这个是最高效的SEO</p>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit  –save</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="在根目录配置文件-config-yml中："><a href="#在根目录配置文件-config-yml中：" class="headerlink" title="在根目录配置文件_config.yml中："></a>在根目录配置文件_config.yml中：</h1><h2 id="添加新字段"><a href="#添加新字段" class="headerlink" title="添加新字段"></a>添加新字段</h2><p>需要在<a href="https://ziyuan.baidu.com/">百度资源平台</a>注册并获取token秘钥</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">100</span> <span class="comment"># 提交最新的一个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">wudong.tech</span> <span class="comment"># 在百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">23GYpxowKnhVsUM</span> <span class="comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure>

<h2 id="deploy中添加新的type"><a href="#deploy中添加新的type" class="headerlink" title="deploy中添加新的type"></a>deploy中添加新的type</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span>       <span class="comment">#这行最前面加-</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span>     <span class="comment">#这行是新加的</span></span><br></pre></td></tr></table></figure>

<h1 id="最后重新deploy一下就好啦。"><a href="#最后重新deploy一下就好啦。" class="headerlink" title="最后重新deploy一下就好啦。"></a>最后重新deploy一下就好啦。</h1>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言Map</title>
    <url>/posts/go-14map/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Map 是一种无序的键值对的集合。Map 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。</p>
<p>Map 是一种集合，所以我们可以像迭代数组和切片那样迭代它。不过，Map 是无序的，我们无法决定它的返回顺序，这是因为 Map 是使用 hash 表来实现的。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>可以使用内建函数 make 也可以使用 map 关键字来定义 Map:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 声明变量，默认 map 是 nil */</span></span><br><span class="line"><span class="keyword">var</span> map_variable <span class="keyword">map</span>[key_data_type]value_data_type</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 make 函数 */</span></span><br><span class="line">map_variable := <span class="built_in">make</span>(<span class="keyword">map</span>[key_data_type]value_data_type)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<div class="note info">
            <p>如果不初始化 map，那么就会创建一个 nil map。nil map 不能用来存放键值对</p>
          </div>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> countryCapitalMap <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> <span class="comment">/*创建集合 */</span></span><br><span class="line">    countryCapitalMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* map插入key - value对,各个国家对应的首都 */</span></span><br><span class="line">    countryCapitalMap [ <span class="string">&quot;France&quot;</span> ] = <span class="string">&quot;巴黎&quot;</span></span><br><span class="line">    countryCapitalMap [ <span class="string">&quot;Italy&quot;</span> ] = <span class="string">&quot;罗马&quot;</span></span><br><span class="line">    countryCapitalMap [ <span class="string">&quot;Japan&quot;</span> ] = <span class="string">&quot;东京&quot;</span></span><br><span class="line">    countryCapitalMap [ <span class="string">&quot;India &quot;</span> ] = <span class="string">&quot;新德里&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*使用键输出地图值 */</span> </span><br><span class="line">    <span class="keyword">for</span> country := <span class="keyword">range</span> countryCapitalMap &#123;</span><br><span class="line">        fmt.Println(country, <span class="string">&quot;首都是&quot;</span>, countryCapitalMap [country])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*查看元素在集合中是否存在 */</span></span><br><span class="line">    capital, ok := countryCapitalMap [ <span class="string">&quot;American&quot;</span> ] <span class="comment">/*如果确定是真实的,则存在,否则不存在 */</span></span><br><span class="line">    <span class="comment">/*fmt.Println(capital) */</span></span><br><span class="line">    <span class="comment">/*fmt.Println(ok) */</span></span><br><span class="line">    <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;American 的首都是&quot;</span>, capital)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;American 的首都不存在&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="delete-函数"><a href="#delete-函数" class="headerlink" title="delete() 函数"></a>delete() 函数</h2><p>delete() 函数用于删除集合的元素, 参数为 map 和其对应的 key。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*删除上例中元素*/</span> </span><br><span class="line"><span class="built_in">delete</span>(countryCapitalMap, <span class="string">&quot;France&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言range</title>
    <url>/posts/go-13range/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Go 语言中 range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。</p>
<ul>
<li>在数组和切片中它返回元素的索引和索引对应的值，在集合中返回 key-value 对。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//这是我们使用range去求一个slice的和。使用数组跟这个很类似</span></span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        sum += num</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;sum:&quot;</span>, sum)</span><br><span class="line">    <span class="comment">//在数组上使用range将传入index和值两个变量。上面那个例子我们不需要使用该元素的序号，所以我们使用空白符&quot;_&quot;省略了。有时侯我们确实需要知道它的索引。</span></span><br><span class="line">    <span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">3</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;index:&quot;</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//range也可以用在map的键值对上。</span></span><br><span class="line">    kvs := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;b&quot;</span>: <span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> kvs &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%s -&gt; %s\n&quot;</span>, k, v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//range也可以用来枚举Unicode字符串。第一个参数是字符的索引，第二个是字符（Unicode的值）本身。</span></span><br><span class="line">    <span class="keyword">for</span> i, c := <span class="keyword">range</span> <span class="string">&quot;go&quot;</span> &#123;</span><br><span class="line">        fmt.Println(i, c)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sum: 9</span><br><span class="line">index: 1</span><br><span class="line">a -&gt; apple</span><br><span class="line">b -&gt; banana</span><br><span class="line">0 103</span><br><span class="line">1 111</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言——切片</title>
    <url>/posts/go-12slice/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>Go 语言切片是对数组的抽象。<br>Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go中提供了一种灵活，功能强悍的内置类型切片(“动态数组”),与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。</p>
<a id="more"></a>
<p>你可以声明一个未指定大小的数组来定义切片：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier []<span class="keyword">type</span>;   <span class="comment">//切片不需要说明长度,未赋值前identifier==nil</span></span><br><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>) <span class="comment">//或使用make()函数来创建切片</span></span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)  <span class="comment">//也可以简写</span></span><br><span class="line"><span class="built_in">make</span>([]T, length, capacity) <span class="comment">// 也可以指定容量，其中capacity为可选参数</span></span><br></pre></td></tr></table></figure>

<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>有三中方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s :=<span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="built_in">len</span>,<span class="built_in">cap</span>) </span><br><span class="line">s :=[] <span class="keyword">int</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;</span><br><span class="line">s := arr[startIndex:endIndex] </span><br></pre></td></tr></table></figure>

<h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="len-和-cap-函数"><a href="#len-和-cap-函数" class="headerlink" title="len() 和 cap() 函数"></a>len() 和 cap() 函数</h2><p>切片是可索引的，并且可以由 len() 方法获取长度。<br>切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br></pre></td></tr></table></figure>

<h2 id="append-和-copy-函数"><a href="#append-和-copy-函数" class="headerlink" title="append() 和 copy() 函数"></a>append() 和 copy() 函数</h2><p>如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。<br>下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 向切片添加一个元素 */</span></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 同时添加多个元素 */</span></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 拷贝 numbers 的内容到 numbers1 */</span></span><br><span class="line"><span class="built_in">copy</span>(numbers1,numbers)</span><br></pre></td></tr></table></figure>

<h1 id="切片截取"><a href="#切片截取" class="headerlink" title="切片截取"></a>切片截取</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">numbers := []<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;   <span class="comment">//len=9 cap=9 slice=[0 1 2 3 4 5 6 7 8]</span></span><br><span class="line">number3 := numbers[<span class="number">2</span>:<span class="number">5</span>]   <span class="comment">//len=3 cap=7 slice=[2 3 4],cap从[start:end]的start开始向后计算</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言结构体</title>
    <url>/posts/go-11struct/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h1><p>结构体定义需要使用 type 和 struct 语句。struct 语句定义一个新的数据类型，结构体中有一个或多个成员。type 语句设定了结构体的名称。结构体的格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line">   title <span class="keyword">string</span></span><br><span class="line">   author <span class="keyword">string</span></span><br><span class="line">   subject <span class="keyword">string</span></span><br><span class="line">   book_id <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>一旦定义了结构体类型，它就能用于变量的声明，语法格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Books&#123;<span class="string">&quot;Go 语言&quot;</span>, <span class="string">&quot;www.runoob.com&quot;</span>, <span class="string">&quot;Go 语言教程&quot;</span>, <span class="number">6495407</span>&#125;</span><br><span class="line">或</span><br><span class="line">Books&#123;title: <span class="string">&quot;Go 语言&quot;</span>, author: <span class="string">&quot;www.runoob.com&quot;</span>, subject: <span class="string">&quot;Go 语言教程&quot;</span>, book_id: <span class="number">6495407</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="访问结构体成员"><a href="#访问结构体成员" class="headerlink" title="访问结构体成员"></a>访问结构体成员</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构体.成员名</span></span><br><span class="line">Book2.title = <span class="string">&quot;Python 教程&quot;</span></span><br><span class="line">Book2.author = <span class="string">&quot;www.runoob.com&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="结构体作为函数参数"><a href="#结构体作为函数参数" class="headerlink" title="结构体作为函数参数"></a>结构体作为函数参数</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">printBook(Book1) <span class="comment">/* 打印 Book1 信息 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBook</span><span class="params">( book Books )</span></span> &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> struct_pointer *Books</span><br></pre></td></tr></table></figure>
<p>以上定义的指针变量可以存储结构体变量的地址。查看结构体变量地址，可以将 &amp; 符号放置于结构体变量前：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">struct_pointer = &amp;Book1</span><br></pre></td></tr></table></figure>
<p>使用结构体指针访问结构体成员，使用 “.” 操作符：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">struct_pointer.title</span><br></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Book Books  <span class="comment">/* Declare Book1 of type Book */</span></span><br><span class="line">printBook(&amp;Book)  <span class="comment">//函数调用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBook</span><span class="params">( book *Books )</span></span> &#123;  <span class="comment">//函数定义</span></span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book title : %s\n&quot;</span>, book.title)</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book author : %s\n&quot;</span>, book.author)</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book subject : %s\n&quot;</span>, book.subject)</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book book_id : %d\n&quot;</span>, book.book_id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言指针</title>
    <url>/posts/go-10zhizhen/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="声明指针"><a href="#声明指针" class="headerlink" title="声明指针"></a>声明指针</h1><p>一个指针变量指向了一个值的内存地址<br>类似于变量和常量，在使用指针前你需要声明指针。指针声明格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> var_name *<span class="keyword">var</span>-<span class="keyword">type</span></span><br></pre></td></tr></table></figure>
<p>var-type 为指针类型，var_name 为指针变量名，* 号用于指定变量是作为一个指针。以下是有效的指针声明：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ip *<span class="keyword">int</span>        <span class="comment">/* 指向整型*/</span></span><br><span class="line"><span class="keyword">var</span> fp *<span class="keyword">float32</span>    <span class="comment">/* 指向浮点型 */</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="使用指针"><a href="#使用指针" class="headerlink" title="使用指针"></a>使用指针</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ul>
<li>定义指针变量。</li>
<li>为指针变量赋值。</li>
<li>访问指针变量中指向地址的值。<ul>
<li>在指针类型前面加上 * 号（前缀）来获取指针所指向的内容。</li>
</ul>
</li>
</ul>
<h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span>= <span class="number">20</span>   <span class="comment">/* 声明实际变量 */</span></span><br><span class="line"><span class="keyword">var</span> ip *<span class="keyword">int</span>        <span class="comment">/* 声明指针变量 */</span></span><br><span class="line">ip = &amp;a  <span class="comment">/* 指针变量的存储地址 */</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;a 变量的地址是: %x\n&quot;</span>, &amp;a  )</span><br><span class="line"><span class="comment">/* 指针变量的存储地址 */</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ip 变量储存的指针地址: %x\n&quot;</span>, ip )</span><br><span class="line"><span class="comment">/* 使用指针访问值 */</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;*ip 变量的值: %d\n&quot;</span>, *ip )</span><br></pre></td></tr></table></figure>

<h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  ptr *<span class="keyword">int</span>      <span class="comment">/* 不赋值,ptr=0 */</span></span><br><span class="line"><span class="keyword">if</span>(ptr != <span class="literal">nil</span>)     <span class="comment">/* ptr 不是空指针 */</span></span><br><span class="line"><span class="keyword">if</span>(ptr == <span class="literal">nil</span>)     <span class="comment">/* ptr 是空指针 */</span></span><br></pre></td></tr></table></figure>

<h1 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ptr [MAX]*<span class="keyword">int</span>; <span class="comment">//定义</span></span><br><span class="line">ptr[i] = &amp;a[i] <span class="comment">/* 整数地址赋值给指针数组 */</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a[%d] = %d\n&quot;</span>, i,*ptr[i] )  <span class="comment">//访问</span></span><br></pre></td></tr></table></figure>

<h1 id="Go-语言指针作为函数参数"><a href="#Go-语言指针作为函数参数" class="headerlink" title="Go 语言指针作为函数参数"></a>Go 语言指针作为函数参数</h1><p>Go 语言允许向函数传递指针，只需要在函数定义的参数上设置为指针类型即可。<br>以下实例演示了如何向函数传递指针，并在函数调用后修改函数内的值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">swap(&amp;a, &amp;b);   <span class="comment">//函数调用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x *<span class="keyword">int</span>, y *<span class="keyword">int</span>)</span></span> &#123;  <span class="comment">//函数定义</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言数组</title>
    <url>/posts/go-9array/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h1><p>Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> variable_name [SIZE] variable_type</span><br></pre></td></tr></table></figure>
<p>以上为一维数组的定义方式。例如以下定义了数组 balance 长度为 10 类型为 float32：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> balance [<span class="number">10</span>] <span class="keyword">float32</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> balance = [<span class="number">5</span>]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line"><span class="comment">//忽略 [] 中的数字不设置数组大小</span></span><br><span class="line"> <span class="keyword">var</span> balance = [...]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>二维数组是最简单的多维数组，二维数组本质上是由一维数组组成的。二维数组定义方式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrayName [ x ][ y ] variable_type</span><br></pre></td></tr></table></figure>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>多维数组可通过大括号来初始值。以下实例为一个 3 行 4 列的二维数组：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">3</span>][<span class="number">4</span>]<span class="keyword">int</span>&#123;  </span><br><span class="line"> &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; ,   <span class="comment">/*  第一行索引为 0 */</span></span><br><span class="line"> &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125; ,   <span class="comment">/*  第二行索引为 1 */</span></span><br><span class="line"> &#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;,   <span class="comment">/* 第三行索引为 2 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="向函数传数组"><a href="#向函数传数组" class="headerlink" title="向函数传数组"></a>向函数传数组</h1><ol>
<li><p>形参设定数组大小：<code>void myFunction(param [10]int)</code></p>
</li>
<li><p>形参未设定数组大小：<code>void myFunction(param []int)</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言函数</title>
    <url>/posts/go-8func/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h1><h2 id="Go-语言函数定义格式如下："><a href="#Go-语言函数定义格式如下：" class="headerlink" title="Go 语言函数定义格式如下："></a>Go 语言函数定义格式如下：</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_name</span><span class="params">( [parameter list] )</span> [<span class="title">return_types</span>]</span> &#123;</span><br><span class="line">   函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="函数定义解析："><a href="#函数定义解析：" class="headerlink" title="函数定义解析："></a>函数定义解析：</h2><ul>
<li>func：函数由 func 开始声明</li>
<li>function_name：函数名称，函数名和参数列表一起构成了函数签名。</li>
<li>parameter list：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。</li>
<li>return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。</li>
<li>函数体：函数定义的代码集合。</li>
</ul>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>以下实例为 max() 函数的代码，该函数传入两个整型参数 num1 和 num2，并返回这两个参数的最大值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 函数返回两个数的最大值 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(num1, num2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 声明局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">      result = num1</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = num2</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>当创建函数时，你定义了函数需要做什么，通过调用该函数来执行指定任务。<br>调用函数，向函数传递参数，并返回值，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">   <span class="keyword">var</span> b <span class="keyword">int</span> = <span class="number">200</span></span><br><span class="line">   <span class="keyword">var</span> ret <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 调用函数并返回最大值 */</span></span><br><span class="line">   ret = max(a, b)</span><br><span class="line"></span><br><span class="line">   fmt.Printf( <span class="string">&quot;最大值是 : %d\n&quot;</span>, ret )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数返回两个数的最大值 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(num1, num2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">      result = num1</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = num2</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数返回多个值"><a href="#函数返回多个值" class="headerlink" title="函数返回多个值"></a>函数返回多个值</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h1><h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><p>传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p>
<h2 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h2><p>引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义交换值函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x *<span class="keyword">int</span>, y *<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> temp <span class="keyword">int</span></span><br><span class="line">   temp = *x    <span class="comment">/* 保持 x 地址上的值 */</span></span><br><span class="line">   *x = *y      <span class="comment">/* 将 y 值赋给 x */</span></span><br><span class="line">   *y = temp    <span class="comment">/* 将 temp 值赋给 y */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">swap(&amp;a, &amp;b)</span><br></pre></td></tr></table></figure>

<h1 id="函数用法"><a href="#函数用法" class="headerlink" title="函数用法"></a>函数用法</h1><h2 id="函数作为另外一个函数的实参"><a href="#函数作为另外一个函数的实参" class="headerlink" title="函数作为另外一个函数的实参"></a>函数作为另外一个函数的实参</h2><p>函数定义后可作为另外一个函数的实参数传入</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">/* 声明函数变量 */</span></span><br><span class="line">   getSquareRoot := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">      <span class="keyword">return</span> math.Sqrt(x)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 使用函数 */</span></span><br><span class="line">   fmt.Println(getSquareRoot(<span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是匿名函数，可在动态编程中使用。<br>以下实例中，我们创建了函数 getSequence() ，返回另外一个函数。该函数的目的是在闭包中递增 i 变量，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSequence</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   i:=<span class="number">0</span></span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">      i+=<span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> i  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">/* nextNumber 为一个函数，函数 i 为 0 */</span></span><br><span class="line">   nextNumber := getSequence()  </span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 调用 nextNumber 函数，i 变量自增 1 并返回 */</span></span><br><span class="line">   fmt.Println(nextNumber())</span><br><span class="line">   fmt.Println(nextNumber())</span><br><span class="line">   fmt.Println(nextNumber())</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 创建新的函数 nextNumber1，并查看结果 */</span></span><br><span class="line">   nextNumber1 := getSequence()  </span><br><span class="line">   fmt.Println(nextNumber1())</span><br><span class="line">   fmt.Println(nextNumber1())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法就是一个包含了接受者的函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(variable_name variable_data_type)</span> <span class="title">function_name</span><span class="params">()</span> [<span class="title">return_type</span>]</span>&#123;</span><br><span class="line">   <span class="comment">/* 函数体*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面定义一个结构体类型和该类型的一个方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span>  </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义结构体 */</span></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">  radius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> c1 Circle</span><br><span class="line">  c1.radius = <span class="number">10.00</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;圆的面积 = &quot;</span>, c1.getArea())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该 method 属于 Circle 类型对象中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span> <span class="title">getArea</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="comment">//c.radius 即为 Circle 类型对象中的属性</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">3.14</span> * c.radius * c.radius</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言循环语句</title>
    <url>/posts/go-7xunhuan/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ol>
<li>和 C 语言的 for 一样：</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sum := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">                sum += i</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<ol start="2">
<li>和 C 的 while 一样：</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sum := <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> sum &lt;= <span class="number">10</span>&#123;</span><br><span class="line">                sum += sum</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>和 C 的 for(;;) 一样：</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sum := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            sum++ <span class="comment">// 无限循环下去</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(sum) <span class="comment">// 无法输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="For-each-range-循环"><a href="#For-each-range-循环" class="headerlink" title="For-each range 循环"></a>For-each range 循环</h2><p>这种格式的循环可以对字符串、数组、切片等进行迭代输出元素。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        strings := []<span class="keyword">string</span>&#123;<span class="string">&quot;google&quot;</span>, <span class="string">&quot;runoob&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> i, s := <span class="keyword">range</span> strings &#123;</span><br><span class="line">                fmt.Println(i, s)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        numbers := [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125; </span><br><span class="line">        <span class="keyword">for</span> i,x:= <span class="keyword">range</span> numbers &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;第 %d 位 x 的值 = %d\n&quot;</span>, i,x)</span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h1><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><h3 id="Go-语言中-break-语句用于以下两方面："><a href="#Go-语言中-break-语句用于以下两方面：" class="headerlink" title="Go 语言中 break 语句用于以下两方面："></a>Go 语言中 break 语句用于以下两方面：</h3><ul>
<li>用于循环语句中跳出循环，并开始执行循环之后的语句。<br>（在多重循环中，可以用标号 label 标出想 break 的循环。）</li>
<li>break 在 switch（开关语句）中在执行一条 case 后跳出语句的作用。</li>
</ul>
<h3 id="label标号举例"><a href="#label标号举例" class="headerlink" title="label标号举例"></a>label标号举例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不使用标记</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;---- break ----&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %d\n&quot;</span>, i)</span><br><span class="line">                <span class="keyword">for</span> i2 := <span class="number">11</span>; i2 &lt;= <span class="number">13</span>; i2++ &#123;</span><br><span class="line">                        fmt.Printf(<span class="string">&quot;i2: %d\n&quot;</span>, i2)</span><br><span class="line">                        <span class="keyword">break</span> <span class="comment">//跳出最近一层循环</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用标记</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;---- break label ----&quot;</span>)</span><br><span class="line">    re:</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;i: %d\n&quot;</span>, i)</span><br><span class="line">            <span class="keyword">for</span> i2 := <span class="number">11</span>; i2 &lt;= <span class="number">13</span>; i2++ &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;i2: %d\n&quot;</span>, i2)</span><br><span class="line">                <span class="keyword">break</span> re  <span class="comment">//直接结束re语句</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h2><h3 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h3><ul>
<li>for 循环中，执行 continue 语句会触发 for 增量语句的执行。</li>
<li>在多重循环中，可以用标号 label 标出想 continue 的循环。</li>
</ul>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 不使用标记</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;---- continue ---- &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i: %d\n&quot;</span>, i)</span><br><span class="line">            <span class="keyword">for</span> i2 := <span class="number">11</span>; i2 &lt;= <span class="number">13</span>; i2++ &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;i2: %d\n&quot;</span>, i2)</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment">//i2++</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用标记</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;---- continue label ----&quot;</span>)</span><br><span class="line">    re:</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;i: %d\n&quot;</span>, i)</span><br><span class="line">                <span class="keyword">for</span> i2 := <span class="number">11</span>; i2 &lt;= <span class="number">13</span>; i2++ &#123;</span><br><span class="line">                    fmt.Printf(<span class="string">&quot;i2: %d\n&quot;</span>, i2)</span><br><span class="line">                    <span class="keyword">continue</span> re <span class="comment">//i++</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h2><p>Go 语言的 goto 语句可以无条件地转移到过程中指定的行。</p>
<h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><p>goto配合label LOOP使用，相当于for配合continue</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 循环 */</span></span><br><span class="line">   LOOP: <span class="keyword">for</span> a &lt; <span class="number">20</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> a == <span class="number">15</span> &#123;</span><br><span class="line">         <span class="comment">/* 跳过迭代 */</span></span><br><span class="line">         a = a + <span class="number">1</span></span><br><span class="line">         <span class="keyword">goto</span> LOOP</span><br><span class="line">      &#125;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;a的值为 : %d\n&quot;</span>, a)</span><br><span class="line">      a++     </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>贯口</title>
    <url>/posts/guanko/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>对口相声中常见的表现形式，也叫“背口”。“贯口”的“贯”字，是一气呵成，一贯到底的意思。常见的段子如《报菜名》 《八扇屏 》《地理图》《白事会》 都含有大段的贯口。<br>贯口分为大贯儿和小贯儿两种。大贯儿一般上百句，例如《报菜名》、《地理图》（并称“两大贯儿”）。小贯儿一般十几句到几十句不等，例如《白事会》中就有一些小贯儿。</p>
</blockquote>
<a id="more"></a>

<h2 id="报菜名"><a href="#报菜名" class="headerlink" title="报菜名"></a>报菜名</h2><p>蒸羊羔，蒸熊掌，蒸鹿尾儿，烧花鸭，烧雏鸡儿，烧子鹅。<br>卤猪卤鸭，酱鸡腊肉，松花小肚儿，晾肉香肠。<br>什锦苏盘，熏鸡白肚儿，清蒸八宝-猪，江米酿鸭子。<br>罐儿野鸡，罐儿鹌鹑,<br>卤什件儿，卤子鹅,山鸡兔脯菜蟒银鱼,清蒸哈什蚂。<br>烩鸭丝烩鸭腰烩鸭条,清拌腰丝儿黄心管儿,<br>焖白鳝焖黄鳝,豆鼓鲇鱼,锅烧鲤鱼，锅烧鲇鱼，清蒸甲鱼，抓炒鲤鱼,抓炒对虾。<br>软炸里脊软炸鸡, <br>什锦套肠,麻酥油卷儿熘肘寒尖。<br>熘鲜蘑，熘鱼脯儿熘鱼肚儿熘鱼片儿，醋熘肉片儿。<br>烩三鲜,烩白蘑，烩鸽子蛋,炒银丝烩鳗鱼,炒白虾炝青蛤,炒面鱼炝芦笋,<br>芙蓉燕菜,炒虾仁烩虾仁，烩腰花烩海参，锅烧海参,锅烧白菜,<br>炸太耳，炒田鸡，<br>桂花翅子，清蒸翅子，清蒸江瑶柱，糖溜芡实米,<br>拌鸡丝儿拌肚丝儿，什锦豆腐什锦丁儿，<br>糟虾糟蟹糟鱼，糟熘鱼片儿，<br>熘蟹肉炒蟹肉，蒸南瓜，爙倭瓜，炒丝瓜，爙冬瓜，<br>焖鸡掌,焖鸭掌,焖笋,烩茭白,<br>茄干儿涮羊肉,鸭羹,蟹肉羹,是三鲜木樨汤,<br>红丸子,白丸子,熘丸子,炸丸子,南涧丸子,木樨丸子,三鲜丸子，四喜丸子，龟炸丸子，豆腐丸子,鲜炸丸子,玉腐丸子，氽丸子,<br>一品肉,樱桃肉,马牙肉,红闷肉,黄闷肉，坛子肉，<br>糊肉扣肉,松肉厚肉，烧肉烤肉,腊肉白肉,酱豆腐肉,<br>红肘子,白肘子,水晶肘子,蜜蜡肘子,酱豆腐肘子<br>蒸羊肉,酱羊肉，烧羊肉,烤羊肉，五香羊肉,爆羊肉.<br>氽三样儿,爆三样儿,烩银丝，烩散丹,油焖杂碎三鲜鱼翅栗子鸡,尖氽活鲤鱼,是板鸭筒子鸡。</p>
<hr>
<video src="http://qh04sczlg.hd-bkt.clouddn.com/baocaiming.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/baocaiming.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>

<h2 id="八扇屏之莽撞人"><a href="#八扇屏之莽撞人" class="headerlink" title="八扇屏之莽撞人"></a>八扇屏之莽撞人</h2><p>后汉三国，有一位莽撞人。自从桃园三结义以来，大爷姓刘名备字玄德，家住大树楼桑。二弟姓关名羽字云长，家住山西蒲州梁县。三弟姓张名飞字翼德，家住涿州范阳郡。后续四弟，姓赵名云字子龙，家住真定府常山县，百战百胜，后称为常胜将军。</p>
<p>只皆因长坂坡前，一场鏖战。那赵云，单枪匹马，闯入曹营。砍倒大蠹两杆，夺槊三条。马落陷坑，堪堪废命。曹孟德，在山头之上，见一穿白小将，白盔白甲白旗靠，坐骑白龙马，手使亮银枪，实乃一员勇将。</p>
<p>心想，我若收服此将，何愁大事不成，心中就有爱将之意。暗中有徐庶保护赵云，徐庶进得曹营，一语未发。今日一见赵将军马落陷坑，堪堪废命，口尊丞相，莫非有爱将之意？ 曹操言道，正是。徐庶言道，何不收留此将。</p>
<p>曹操急忙传令，令出山摇动，三军听分明，我要活赵云，不要死子龙。倘有一兵一将 伤损赵将军之性命，八十三万人马，五十一员战将，与他一人抵命。众将闻听，不敢前进，只有后退。赵云一仗怀揣幼主。二仗常胜将军之特勇。</p>
<p>杀了个七进七出，这才闯出重围。曹操一见，这样勇将，焉能放走。在后面紧紧追赶。追至到当阳桥前，张飞赶， 高叫四弟不必惊慌，某家在此，料也无妨！让过赵云的人马，曹操赶到，不见赵云，见一黑脸大汉，立于桥上。</p>
<p>曹操忙问夏侯憞， 这黑脸大汉，他是何人？夏侯憞言道，此乃是张飞，一莽撞人。曹操闻听，大吃一惊。想当初关公在白马坡斩颜良之时曾对某家言道，他有一结拜三弟，姓张名飞字翼德，在百万军中，能取上将之首级如探取物，反掌观纹一般。</p>
<p>今日一见，果然英勇，撤去某家 青罗伞盖，观一观莽撞人的武艺如何？青罗伞盖撤下，只见张飞豹头环眼，面如润铁，黑中透亮，亮中透黑。颏下扎里扎沙一部黑钢髯，犹如钢针，恰似铁线。头戴镔铁盔，二龙斗宝，朱缨飘洒，上嵌八宝云罗伞盖，花冠云长。</p>
<p>身披锁子大叶连环甲，内衬皂 罗袍。足蹬虎头战靴，跨下马，万里烟云兽，手使丈八蛇矛。正在桥头之上，咬牙切齿，捶胸愤恨。大骂，曹操听真，呔！今有你家张三爷在此，尔或攻，或战或进或退或争或斗。</p>
<p>不攻不战不进不退不争不斗，尔乃匹夫之辈。大喊一声，曹兵吓退。大喊二声，顺水横流。大喊三声，把当阳桥吓断。后人有诗赞美日，长坂桥前救赵云，吓退曹操百万军，姓张名飞字翼德，万古留芳莽撞人。</p>
<hr>
<video src="http://qh04sczlg.hd-bkt.clouddn.com/mangzhuangren.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/mangzhuangren.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>

<h2 id="十八愁"><a href="#十八愁" class="headerlink" title="十八愁"></a>十八愁</h2><p>数九寒天，冷风嗖<br>年～年春打六九头<br>正月十五是个龙灯会，有一对狮～子滚绣球啊<br>三月三，王母娘娘蟠桃会<br>大闹天宫啊孙猴又把那个仙桃偷<br>五月单五是端阳日啊，白蛇许仙不到头<br>七月七，传说天河配啊，牛郎织女泪双流<br>八月十五啊云遮月，月里的嫦娥～犯～了忧愁<br>要说愁，净说愁啊，您听我唱上一回绕口令儿十八愁<br>虎也愁，狼也愁<br>象也愁，鹿也愁啊<br>骡子也愁马也愁<br>羊也愁，牛也愁，狗也愁，猪也愁啊<br>鸭子也愁鹅也愁<br>蛤蟆愁，蛤蜊愁，螃蟹也愁，乌龟愁啊，<br>鱼愁虾愁～，各有分由<br>虎愁，不敢把那高山下<br>狼愁的野心不改耍滑头<br>象愁那脸憨皮又厚啊<br>鹿也愁，脑袋上七叉八叉地长犄角<br>马愁鞴鞍行千里呐，骡子愁得一世休<br>羊愁从小把胡子长呐，牛愁愁得犯牛轴<br>狗愁改不了那净吃屎呐，猪愁离不开那臭水沟<br>鸭子愁呢扁了它的嘴，鹅愁得脑袋上它愁了一个奔儿了头<br>蛤蟆愁，长了一身脓疱疥呐，螃蟹愁得净横搂啊<br>蛤蜊也愁，闭关自守啊，那乌龟愁得～不敢出头<br>那个鱼愁离水不能够走呢，虾米愁得，空枪乱扎～没有准头<br>这个绕口令儿最难唱<br>我唱～的是<br>前门楼子九丈九，四门三桥五牌楼，出了便门儿往东走啊，离城四十到通州<br>通州倒有啊，六十六条胡同口<br>在里边住～着一个六十六岁刘老六啊，六十六岁六老刘啊，六十六岁的刘老头这么老哥儿仨<br>盖了那，六十六间好高楼<br>在楼里头有啊，六十六篓桂花油啊<br>在篓上面蒙着六～十六匹罗缎绸<br>在绸上面绣着六～十六个狮子滚绣球<br>在楼外头，栽了那，六十六根儿檀木轴<br>在轴上面拴着六～十六头大牤牛<br>在牛上面驮着六十六个大马猴<br>刘老六六老刘啊刘老头这么老哥仨<br>倒坐～在门口啃骨头<br>打南边来～了一条狗，这条狗好眼熟啊<br>它好像那大～大妈家，大大眉毛、大～大眼睛、大～大鼻子，大大耳朵、大大口啊、大～大妈家的大号挠头狮子狗<br>打北边又来一条狗啊，这条狗它也眼熟啊<br>它好像那二～大妈妈家、二大眉毛、二～大眼睛、二～大鼻子，二大耳朵、二大口啊、二～大妈家的二号挠头狮子狗<br>这两条狗啊抢骨头，它为抢骨～头抢成了仇<br>从南头跑到北头，撞倒了<br>六十六间好高楼，撞洒～了六十六篓桂花油<br>油了六十六匹罗缎绸啊，脏了六～十六个狮～子滚绣球，在楼外头，<br>砸倒了，六十六根儿檀木轴啊，砸惊了六十六头大牤牛，砸跑了六～十六个大马猴<br>打南边儿来个气～不休，手里头拿了个土坯头它去打狗的头<br>也不知气不休的土坯头啊打了狗～的头啊，还是那狗～的头，撞坏～了气不休的土坯头<br>打北边儿来了个秃妞妞，手里拿着个油篓口她去套狗～的头啊<br>也不知秃妞妞的油篓口啊，套上狗的头啊，还是那狗的头啊，钻进～了秃妞妞的油篓口啊<br>刘老六六老刘啊刘老头这么老哥仨<br>打跑了狗啊，他盖起来，六～十六间好高楼啊<br>收起来六十六篓桂花油，洗干净六～十六匹罗缎绸<br>他洗净了，六十六个狮～子滚绣球<br>在楼外头，栽起来，六十六棵儿檀木轴<br>牵回来六十六头大牤牛，逮回来六～十六个大马猴<br>刘老六六老刘啊刘老头这么老哥仨，他又看到那个鸡奔碎米墩漏豆，这个狗啃油篓篓油漏<br>鸡不奔这碎米墩不漏豆，这个狗不啃的油篓篓不漏油啊<br>绕口令儿最难唱<br>我唱～的是，正月里正月正有姐妹二人去逛灯<br>大～姑娘名叫粉红女，二～姑娘名叫女粉红啊<br>粉红女啊身穿一件粉红袄啊，女粉红她身穿一件袄粉红啊<br>粉红女，怀抱～着一瓶粉红酒啊，女粉红她怀抱一瓶酒粉红<br>粉红女女粉红啊，姐儿俩来到了无人处啊，推杯换盏饮刘伶<br>女粉红喝～了粉红女的粉红酒，粉红女饮了女粉红的酒粉红<br>粉红女喝了个酩酊醉，女粉红喝了个醉酩酊<br>女粉红见～着粉红女就打，粉红女揪～着女粉红就拧<br>女粉红撕～了粉红女的粉红袄，粉红女扯～了女粉红的袄粉红<br>姐儿俩打罢停了手啊，自己买线自己缝<br>粉红女买～了一条粉红线，女粉红买了那么一条线粉红啊<br>粉红女她反缝缝缝粉红袄，女粉红她缝反缝缝袄粉红<br>出前门，奔正南<br>有一个面铺面门面冲南<br>这个面铺挂着个蓝布棉门帘<br>摘～了蓝布棉门帘，我敲了敲这个面铺面门面冲南<br>挂上个蓝布棉门帘，我瞧了瞧啊，䁖了䁖啊，把了把啊，看了看啊，<br>这～个面铺面门还是面冲南<br>说出西门～走七步，拾块麂皮补皮裤<br>是麂皮补皮裤，不是麂皮不必补我的麂皮裤<br>说揭着窗户撕字纸，是字纸撕字纸，不是字纸不必撕字纸，在字纸里<br>裹～着一包细银丝，银丝上趴着四千四百四十四个似死似不死的死涩小死虱子皮儿啊<br>说我家有个肥净白净八斤鸡，飞到～了张家后院里<br>张家后院有个肥净白净八斤狗啊，咬了我的肥净白净八斤鸡<br>卖～了他的肥净白净八斤狗啊，赔了我的肥净白净八斤鸡<br>鸡登八八登鸡，鸡不登篱～笆，篱笆也不登鸡啊<br>说苏州有一个苏胡子，这个湖州有一个胡梳子<br>苏州的苏胡子找湖州的胡梳子借梳胡子的梳子梳胡子<br>山前住着一个严圆眼，山后边儿住了个严眼圆<br>二人山前来比眼<br>也不知严圆眼比严眼圆的眼圆，还是严眼圆比严圆眼的圆眼<br>山前，住了一个崔粗腿，山后～边儿住了个崔腿粗<br>二位山前来比腿，也～不知<br>崔粗腿，比崔腿粗的腿粗，还是崔腿粗比崔粗腿的粗腿<br>山前有四十四个小狮子，山后有四十四棵死涩柿子树<br>山前那四十四个小狮子，吃了山后边儿，四十四棵死涩柿子树的涩柿子<br>山前那四十四个小狮子，让山后边儿，四十四棵死涩柿子树的涩柿子给涩死了<br>说你会炖我的炖冻豆腐，来炖我的炖冻豆腐<br>你不会炖我的炖冻豆腐，比胡炖乱炖假充会炖～炖坏～了我的炖冻豆腐<br>说扁担长～板凳宽呐，板凳没有扁担长啊，扁担没有板凳宽<br>这个扁担绑在了板凳上，这个板凳不让这个扁担绑在了板凳上<br>扁担偏要扁担绑在了板凳上，这个板凳偏不让那个扁担绑在了板凳上<br>扁担偏要扁担绑在了板凳上<br>闲来没事儿，出趟城西啊<br>树～木琅琳呐数高低<br>一二三，三二一，一二三四五六七七六五四三二一,<br>六五四三二一啊，五四三二一啊，四三二一，三二一啊，二一一呀一个一啊<br>我数了半天一棵树，一棵树长着七个枝儿<br>一个枝儿结着一样果子， 结～的是那槟子橙子桔子柿子李子栗子梨啊<br>这就是绕口令儿，一个小段儿，我祝大家～身体健康～寿比天齐～</p>
<hr>
<video src="http://qh04sczlg.hd-bkt.clouddn.com/shibachou.mp4" type="video/mp4" poster="http://qh04sczlg.hd-bkt.clouddn.com/shibachou.jpg" controls="controls">
 4     <p>你的浏览器不支持video标签.</p>
 5 </video>]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>贯口</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言条件语句</title>
    <url>/posts/go-6tiaojian/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Go-语言条件语句"><a href="#Go-语言条件语句" class="headerlink" title="Go 语言条件语句"></a>Go 语言条件语句</h1><p>条件语句需要开发者通过指定一个或多个条件，并通过测试条件是否为 true 来决定是否执行指定语句，并在条件为 false 的情况在执行另外的语句。</p>
<table>
<thead>
<tr>
<th align="left">语句</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/go/go-if-statement.html">if 语句</a></td>
<td align="left"><strong>if 语句</strong> 由一个布尔表达式后紧跟一个或多个语句组成。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-if-else-statement.html">if…else 语句</a></td>
<td align="left"><strong>if 语句</strong> 后可以使用可选的 <strong>else 语句</strong>, else 语句中的表达式在布尔表达式为 false 时执行。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-nested-if-statements.html">if 嵌套语句</a></td>
<td align="left">你可以在 <strong>if</strong> 或 <strong>else if</strong> 语句中嵌入一个或多个 <strong>if</strong> 或 <strong>else if</strong> 语句。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-switch-statement.html">switch 语句</a></td>
<td align="left"><strong>switch</strong> 语句用于基于不同条件执行不同动作。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-select-statement.html">select 语句</a></td>
<td align="left"><strong>select</strong> 语句类似于 <strong>switch</strong> 语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。</td>
</tr>
</tbody></table>
<a id="more"></a>

<p>if 语句、if…else 语句、if 嵌套语句与C语言一致，不加赘述</p>
<h2 id="Go-语言-switch-语句"><a href="#Go-语言-switch-语句" class="headerlink" title="Go 语言 switch 语句"></a>Go 语言 switch 语句</h2><ul>
<li>switch 语句用于基于不同条件执行不同动作，每一个 case 分支都是唯一的，从上至下逐一测试，直到匹配为止。</li>
<li>switch 语句执行的过程从上至下，直到找到匹配项，匹配项后面也不需要再加 break。</li>
<li>switch 默认情况下 case 最后自带 break 语句，匹配成功后就不会执行其他 case，如果我们需要执行后面的 case，可以使用 fallthrough 。</li>
</ul>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>可以加break语句</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Type-Switch"><a href="#Type-Switch" class="headerlink" title="Type Switch"></a>Type Switch</h3><p>switch 语句还可以被用于 type-switch 来判断某个 interface 变量中实际存储的变量类型。</p>
<p>Type Switch 语法格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> x.(<span class="keyword">type</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">type</span>:</span><br><span class="line">       statement(s);      </span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">type</span>:</span><br><span class="line">       statement(s); </span><br><span class="line">    <span class="comment">/* 你可以定义任意个数的case */</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">/* 可选 */</span></span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fallthrough"><a href="#fallthrough" class="headerlink" title="fallthrough"></a>fallthrough</h3><p>使用 fallthrough 会强制执行后面的 case 语句，fallthrough 不会判断下一条 case 的表达式结果是否为 true。<br>举例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;1、case 条件语句为 false&quot;</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;2、case 条件语句为 true&quot;</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;3、case 条件语句为 false&quot;</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;4、case 条件语句为 true&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;5、case 条件语句为 false&quot;</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;6、默认 case&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2、case 条件语句为 true</span><br><span class="line">3、case 条件语句为 false</span><br><span class="line">4、case 条件语句为 true</span><br></pre></td></tr></table></figure>

<h2 id="Go-语言-select-语句"><a href="#Go-语言-select-语句" class="headerlink" title="Go 语言 select 语句"></a>Go 语言 select 语句</h2><p>select 是 Go 中的一个控制结构，类似于用于通信的 switch 语句。每个 case 必须是一个通信操作，要么是发送要么是接收。<br>select 随机执行一个可运行的 case。如果没有 case 可运行，它将阻塞，直到有 case 可运行。一个默认的子句应该总是可运行的。</p>
<h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><ul>
<li>每个 case 都必须是一个通信</li>
<li>所有 channel 表达式都会被求值</li>
<li>所有被发送的表达式都会被求值</li>
<li>如果任意某个通信可以进行，它就执行，其他被忽略。</li>
<li>如果有多个 case 都可以运行，Select 会随机公平地选出一个执行。其他不会执行。 </li>
<li>若没有case可以运行：<ol>
<li>如果有 default 子句，则执行该语句。</li>
<li>如果没有 default 子句，select 将阻塞，直到某个通信可以运行；Go 不会重新对 channel 或值进行求值。</li>
</ol>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> communication clause  :</span><br><span class="line">       statement(s);      </span><br><span class="line">    <span class="keyword">case</span> communication clause  :</span><br><span class="line">       statement(s); </span><br><span class="line">    <span class="comment">/* 你可以定义任意数量的 case */</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">/* 可选 */</span></span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	x, y := <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> c &lt;- x:</span><br><span class="line">                x, y = y, x+y</span><br><span class="line">            <span class="keyword">case</span> &lt;-quit:</span><br><span class="line">                fmt.Println(<span class="string">&quot;quit&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">6</span>; i++ &#123;</span><br><span class="line">			fmt.Println(&lt;-c)</span><br><span class="line">		&#125;</span><br><span class="line">		quit &lt;- <span class="number">0</span></span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	fibonacci(c, quit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果,自己品</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言运算符</title>
    <url>/posts/go-5yunsuanfu/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Go-语言运算符"><a href="#Go-语言运算符" class="headerlink" title="Go 语言运算符"></a>Go 语言运算符</h1><p>运算符用于在程序运行时执行数学或逻辑运算。<br>Go 语言内置的运算符有：</p>
<ul>
<li>算术运算符(与C语言相同，不加赘述)</li>
<li>关系运算符(与C语言相同，不加赘述)</li>
<li>逻辑运算符(与C语言相同，不加赘述)</li>
<li>位运算符(与C语言相同，不加赘述)</li>
<li>赋值运算符</li>
<li>其他运算符</li>
</ul>
<p>接下来让我们来详细看看各个运算符的介绍。</p>
<a id="more"></a>

<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>下表列出了所有Go语言的赋值运算符。<br>| 运算符 | 描述                                           | 实例                                  |<br>| :—: | :——————————————-: | :———————————-: |<br>| =      | 简单的赋值运算符，将一个表达式的值赋给一个左值 | C = A + B 将 A + B 表达式结果赋值给 C |<br>| +=     | 相加后再赋值                                   | C += A 等于 C = C + A                 |<br>| -=     | 相减后再赋值                                   | C -= A 等于 C = C - A                 |<br>| *=     | 相乘后再赋值                                   | C *= A 等于 C = C * A                 |<br>| /=     | 相除后再赋值                                   | C /= A 等于 C = C / A                 |<br>| %=     | 求余后再赋值                                   | C %= A 等于 C = C % A                 |<br>| &lt;&lt;=    | 左移后赋值                                     | C &lt;&lt;= 2 等于 C = C &lt;&lt; 2               |<br>| &gt;&gt;=    | 右移后赋值                                     | C &gt;&gt;= 2 等于 C = C &gt;&gt; 2               |<br>| &amp;=     | 按位与后赋值                                   | C &amp;= 2 等于 C = C &amp; 2                 |<br>| ^=     | 按位异或后赋值                                 | C ^= 2 等于 C = C ^ 2                 |<br>| |=    | 按位或后赋值                                   | C |= 2 等于 C = C | 2               |</p>
<h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><p>下表列出了Go语言的其他运算符。<br>| 运算符 |       描述       |            实例            |<br>| :—-: | :————–: | :————————: |<br>|   &amp;    | 返回变量存储地址 | &a; 将给出变量的实际地址。 |<br>|   *    |    指针变量。    |     *a; 是一个指针变量     |</p>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：</p>
<table>
<thead>
<tr>
<th align="center">优先级</th>
<th align="center">运算符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5</td>
<td align="center">* / % &lt;&lt; &gt;&gt; &amp; &amp;^</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">+ - | ^</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">== != &lt; &lt;= &gt; &gt;=</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">&amp;&amp;</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">||</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言常量</title>
    <url>/posts/go-4changliang/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常量的定义格式："><a href="#常量的定义格式：" class="headerlink" title="常量的定义格式："></a>常量的定义格式：</h1><h2 id="一般格式"><a href="#一般格式" class="headerlink" title="一般格式"></a>一般格式</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> identifier [<span class="keyword">type</span>] = value</span><br></pre></td></tr></table></figure>
<p>你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。</p>
<ul>
<li>显式类型定义： <code>const b string = &quot;abc&quot;</code></li>
<li>隐式类型定义： <code>const b = &quot;abc&quot;</code><a id="more"></a>

</li>
</ul>
<h2 id="多个相同类型的声明可以简写为："><a href="#多个相同类型的声明可以简写为：" class="headerlink" title="多个相同类型的声明可以简写为："></a>多个相同类型的声明可以简写为：</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> c_name1, c_name2 = value1, value2</span><br></pre></td></tr></table></figure>

<h2 id="常量还可以用作枚举："><a href="#常量还可以用作枚举：" class="headerlink" title="常量还可以用作枚举："></a>常量还可以用作枚举：</h2><p>(常量若未赋值，取值和上一个相同)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Unknown = <span class="number">0</span></span><br><span class="line">    Female = <span class="number">1</span></span><br><span class="line">    Male = <span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h1><ul>
<li>iota，特殊常量，可以认为是一个可以被编译器修改的常量。</li>
<li>iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。<br>iota 可以被用作枚举值：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span></span><br><span class="line">    b = <span class="literal">iota</span></span><br><span class="line">    c = <span class="literal">iota</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2<br>举例：<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        a = <span class="literal">iota</span>   <span class="comment">//0</span></span><br><span class="line">        b          <span class="comment">//1</span></span><br><span class="line">        c          <span class="comment">//2</span></span><br><span class="line">        d = <span class="string">&quot;ha&quot;</span>   <span class="comment">//独立值，iota += 1</span></span><br><span class="line">        e          <span class="comment">//&quot;ha&quot;   iota += 1</span></span><br><span class="line">        f = <span class="number">100</span>    <span class="comment">//iota +=1</span></span><br><span class="line">        g          <span class="comment">//100  iota +=1</span></span><br><span class="line">        h = <span class="literal">iota</span>   <span class="comment">//7,恢复计数</span></span><br><span class="line">        i          <span class="comment">//8</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(a,b,c,d,e,f,g,h,i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
结果为<code>0 1 2 ha ha 100 100 7 8</code></li>
</ul>
]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言变量</title>
    <url>/posts/go-3bianliang/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Go-语言变量"><a href="#Go-语言变量" class="headerlink" title="Go 语言变量"></a>Go 语言变量</h1><h2 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h2><p>变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。<br>变量可以通过变量名访问。</p>
<p>Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。<br>声明变量的一般形式是使用 var 关键字：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier <span class="keyword">type</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>可以一次声明多个变量：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier1, identifier2 <span class="keyword">type</span></span><br></pre></td></tr></table></figure>

<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><h3 id="第一种，指定变量类型，如果没有初始化，则变量默认为零值。"><a href="#第一种，指定变量类型，如果没有初始化，则变量默认为零值。" class="headerlink" title="第一种，指定变量类型，如果没有初始化，则变量默认为零值。"></a>第一种，指定变量类型，如果没有初始化，则变量默认为零值。</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个变量并初始化，零值为&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">&quot;RUNOOB&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值类型没有初始化就为0</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bool 零值为 false</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以下几种类型零值为 nil：</span></span><br><span class="line"><span class="keyword">var</span> a *<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> a []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>] <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> a <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="keyword">var</span> a error <span class="comment">// error 是接口</span></span><br></pre></td></tr></table></figure>
<h3 id="第二种，根据值自行判定变量类型。"><a href="#第二种，根据值自行判定变量类型。" class="headerlink" title="第二种，根据值自行判定变量类型。"></a>第二种，根据值自行判定变量类型。</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> v_name = value</span><br></pre></td></tr></table></figure>
<h3 id="第三种，省略-var-注意-左侧如果没有声明新的变量，就产生编译错误，格式："><a href="#第三种，省略-var-注意-左侧如果没有声明新的变量，就产生编译错误，格式：" class="headerlink" title="第三种，省略 var, 注意 := 左侧如果没有声明新的变量，就产生编译错误，格式："></a>第三种，省略 var, 注意 := 左侧如果没有声明新的变量，就产生编译错误，格式：</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v_name := value</span><br></pre></td></tr></table></figure>
<p>例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> intVal <span class="keyword">int</span> </span><br><span class="line">intVal :=<span class="number">1</span> <span class="comment">// 这时候会产生编译错误</span></span><br><span class="line">intVal,intVal1 := <span class="number">1</span>,<span class="number">2</span> <span class="comment">// 此时不会产生编译错误，因为有声明新的变量，因为 := 是一个声明语句,支持多变量声明</span></span><br></pre></td></tr></table></figure>
<h3 id="全局声明"><a href="#全局声明" class="headerlink" title="全局声明"></a>全局声明</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (  <span class="comment">// 这种因式分解关键字的写法一般用于声明全局变量</span></span><br><span class="line">    a <span class="keyword">int</span></span><br><span class="line">    b <span class="keyword">bool</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">string</span></span><br><span class="line">a, b, c = <span class="number">5</span>, <span class="number">7</span>, <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>
<p>上面这行假设了变量 a，b 和 c 都已经被声明，否则的话应该这样使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a, b, c := <span class="number">5</span>, <span class="number">7</span>, <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>单纯地给变量赋值是不够的，这个值必须被使用</p>
          </div>
<p>如果你想要交换两个变量的值，则可以简单地使用<code> a, b = b, a</code>，两个变量的类型必须是相同。</p>
]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言基础语法</title>
    <url>/posts/go-2basic/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释不会被编译，每一个包应该有相关注释。<br>单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 单行注释</span><br><span class="line">&#x2F;*</span><br><span class="line"> Author by 菜鸟教程</span><br><span class="line"> 我是多行注释</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符用来命名变量、类型等程序实体。一个标识符实际上就是一个或是多个字母(A<del>Z和a</del>z)数字(0~9)、下划线_组成的序列，但是第一个字符必须是字母或下划线而不能是数字。<br>以下是有效的标识符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mahesh   kumar   abc   move_name   a_123</span><br><span class="line">myname50   _temp   j   a23b9   retVal</span><br></pre></td></tr></table></figure>
<h2 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h2><p>Go 语言的字符串可以通过’+’实现</p>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>下面列举了 Go 代码中会使用到的 25 个关键字或保留字：</p>
<table>
<thead>
<tr>
<th align="center">break</th>
<th align="center">default</th>
<th align="center">func</th>
<th align="center">interface</th>
<th align="center">select</th>
</tr>
</thead>
<tbody><tr>
<td align="center">case</td>
<td align="center">defer</td>
<td align="center">go</td>
<td align="center">map</td>
<td align="center">struct</td>
</tr>
<tr>
<td align="center">chan</td>
<td align="center">else</td>
<td align="center">goto</td>
<td align="center">package</td>
<td align="center">switch</td>
</tr>
<tr>
<td align="center">const</td>
<td align="center">fallthrough</td>
<td align="center">if</td>
<td align="center">range</td>
<td align="center">type</td>
</tr>
<tr>
<td align="center">continue</td>
<td align="center">for</td>
<td align="center">import</td>
<td align="center">return</td>
<td align="center">var</td>
</tr>
</tbody></table>
<p>除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符：</p>
<table>
<thead>
<tr>
<th>append</th>
<th>bool</th>
<th>byte</th>
<th>cap</th>
<th>close</th>
<th>complex</th>
<th>complex64</th>
<th>complex128</th>
<th>uint16</th>
</tr>
</thead>
<tbody><tr>
<td>copy</td>
<td>false</td>
<td>float32</td>
<td>float64</td>
<td>imag</td>
<td>int</td>
<td>int8</td>
<td>int16</td>
<td>uint32</td>
</tr>
<tr>
<td>int32</td>
<td>int64</td>
<td>iota</td>
<td>len</td>
<td>make</td>
<td>new</td>
<td>nil</td>
<td>panic</td>
<td>uint64</td>
</tr>
<tr>
<td>print</td>
<td>println</td>
<td>real</td>
<td>recover</td>
<td>string</td>
<td>true</td>
<td>uint</td>
<td>uint8</td>
<td>uintptr</td>
</tr>
</tbody></table>
<h2 id="Go-语言中变量的声明必须使用空格隔开，如："><a href="#Go-语言中变量的声明必须使用空格隔开，如：" class="headerlink" title="Go 语言中变量的声明必须使用空格隔开，如："></a>Go 语言中变量的声明必须使用空格隔开，如：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var age int;</span><br></pre></td></tr></table></figure>

<h2 id="Go-语言数据类型"><a href="#Go-语言数据类型" class="headerlink" title="Go 语言数据类型"></a>Go 语言数据类型</h2><p>在 Go 编程语言中，数据类型用于声明函数和变量。<br>数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。<br>Go 语言按类别有以下几种数据类型：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>类型和描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><strong>布尔型</strong> 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</td>
</tr>
<tr>
<td>2</td>
<td><strong>数字类型</strong> 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td>
</tr>
<tr>
<td>3</td>
<td><strong>字符串类型:</strong> 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td>
</tr>
<tr>
<td>4</td>
<td><strong>派生类型:</strong> 包括：(a) 指针类型（Pointer）(b) 数组类型(c) 结构化类型(struct)(d) Channel 类型(e) 函数类型(f) 切片类型(g) 接口类型（interface）(h) Map 类型</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言入门（环境安装）</title>
    <url>/posts/go-1intruduct/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="go语言简介"><a href="#go语言简介" class="headerlink" title="go语言简介"></a>go语言简介</h1><h2 id="Go-语言特色"><a href="#Go-语言特色" class="headerlink" title="Go 语言特色"></a>Go 语言特色</h2><ul>
<li>简洁、快速、安全</li>
<li>并行、有趣、开源</li>
<li>内存管理、数组安全、编译迅速</li>
</ul>
<h2 id="Go-语言用途"><a href="#Go-语言用途" class="headerlink" title="Go 语言用途"></a>Go 语言用途</h2><ul>
<li>Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。</li>
<li>对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。<a id="more"></a>

</li>
</ul>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="go语言环境安装"><a href="#go语言环境安装" class="headerlink" title="go语言环境安装"></a>go语言环境安装</h2><ul>
<li>访问<a href="https://golang.google.cn/dl/">go语言网站</a>，选择系统并下载</li>
<li>点击.msi文件进行安装</li>
<li>在cmd中输入 <code>go version</code> 测试环境是否安装</li>
</ul>
<h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h2><ul>
<li>在任意位置新建hello.go文件<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  定义了包名package, main表示一个可独立执行的程序</span></span><br><span class="line"><span class="comment">//  每个文件必须声明包</span></span><br><span class="line"><span class="comment">//  每个 Go 应用程序都包含一个名为 main 的包。</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">//  这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 IO（输入/输出）的函数。</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//  入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;   <span class="comment">//&#123; 不能在单独的行上</span></span><br><span class="line">	<span class="comment">// 打印，最后会换行</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>cmd定位到当前文件夹输入 <code>go run hello.go</code></li>
<li>输出结果为 <code>hello world</code></li>
<li><code>go build hello.go</code> 可以将代码打包成exe文件</li>
</ul>
<h2 id="VSCode插件安装"><a href="#VSCode插件安装" class="headerlink" title="VSCode插件安装"></a>VSCode插件安装</h2><h3 id="安装下图两个插件"><a href="#安装下图两个插件" class="headerlink" title="安装下图两个插件"></a>安装下图两个插件</h3><p><img src="/posts/go-1intruduct/go%E6%8F%92%E4%BB%B6.jpg" alt="go插件"><br><img src="/posts/go-1intruduct/coderunner.jpg" alt="代码运行插件"></p>
<h3 id="编写代码，右键run-code运行"><a href="#编写代码，右键run-code运行" class="headerlink" title="编写代码，右键run code运行"></a>编写代码，右键run code运行</h3><div class="note info">
            <p>vscode需要以管理员身份运行</p>
          </div>


]]></content>
      <categories>
        <category>backend</category>
        <category>go语言</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>数据通信与网络</title>
    <url>/posts/jiwang/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="软件工程专业数据通信与网络课程笔记"><a href="#软件工程专业数据通信与网络课程笔记" class="headerlink" title="软件工程专业数据通信与网络课程笔记"></a>软件工程专业数据通信与网络课程笔记</h1><a id="more"></a>
<iframe src="http://qh04sczlg.hd-bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E4%B8%8E%E7%BD%91%E7%BB%9C.pdf" width="100%" height="1000px"></iframe>
]]></content>
      <categories>
        <category>笔记</category>
        <category>数据通信与网络</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数据通信与网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成课堂笔记</title>
    <url>/posts/jizu/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="软件工程专业计算机组成课程笔记"><a href="#软件工程专业计算机组成课程笔记" class="headerlink" title="软件工程专业计算机组成课程笔记"></a>软件工程专业计算机组成课程笔记</h1><a id="more"></a>
<iframe src="http://qh04sczlg.hd-bkt.clouddn.com/%E8%AE%A1%E7%BB%84.pdf" width="100%" height="1000px"></iframe>]]></content>
      <categories>
        <category>笔记</category>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>计算机组成</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理课堂笔记</title>
    <url>/posts/bianyi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="软件工程专业编译原理课程笔记"><a href="#软件工程专业编译原理课程笔记" class="headerlink" title="软件工程专业编译原理课程笔记"></a>软件工程专业编译原理课程笔记</h1><a id="more"></a>
<iframe src="http://qh04sczlg.hd-bkt.clouddn.com/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.pdf" width="100%" height="1000px"></iframe>]]></content>
      <categories>
        <category>笔记</category>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统课堂笔记</title>
    <url>/posts/caozuoxitong/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="软件工程专业操作系统课程笔记"><a href="#软件工程专业操作系统课程笔记" class="headerlink" title="软件工程专业操作系统课程笔记"></a>软件工程专业操作系统课程笔记</h1><a id="more"></a>
<iframe src="http://qh04sczlg.hd-bkt.clouddn.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.pdf" width="100%" height="1000px"></iframe>]]></content>
      <categories>
        <category>笔记</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>软件体系结构课堂笔记</title>
    <url>/posts/ruanti/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="软件工程专业软件体系结构课程笔记"><a href="#软件工程专业软件体系结构课程笔记" class="headerlink" title="软件工程专业软件体系结构课程笔记"></a>软件工程专业软件体系结构课程笔记</h1><a id="more"></a>
<iframe src="http://qh04sczlg.hd-bkt.clouddn.com/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.pdf" width="100%" height="1000px"></iframe>]]></content>
      <categories>
        <category>笔记</category>
        <category>软件体系结构</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>软件体系结构</tag>
      </tags>
  </entry>
  <entry>
    <title>入门harmony鸿蒙的第一个程序</title>
    <url>/posts/harmony-start/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>视频教程链接：<a href="https://www.bilibili.com/video/BV1mv411179B">https://www.bilibili.com/video/BV1mv411179B</a></p>
</blockquote>
<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>上<a href="https://developer.harmonyos.com/cn/develop/deveco-studio#download">华为鸿蒙官网</a>下载DevEco Studio开发工具</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>阅读<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/environment_config-0000001052902427">官方配置文档</a>进行配置，根据需要下载java，js和c/c++的SDK</p>
<a id="more"></a>

<h1 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="选择应用类型和语言"><a href="#选择应用类型和语言" class="headerlink" title="选择应用类型和语言"></a>选择应用类型和语言</h3><p>我选择的是电视项目，使用java语言<br><img src="/posts/harmony-start/create.jpg" alt="选择应用类型和语言"></p>
<h3 id="选择项目名称和路径"><a href="#选择项目名称和路径" class="headerlink" title="选择项目名称和路径"></a>选择项目名称和路径</h3><p><img src="/posts/harmony-start/create2.jpg" alt="选择项目名称和路径"></p>
<h2 id="安装模拟器"><a href="#安装模拟器" class="headerlink" title="安装模拟器"></a>安装模拟器</h2><h3 id="点开hdv-manager"><a href="#点开hdv-manager" class="headerlink" title="点开hdv manager"></a>点开hdv manager</h3><p><img src="/posts/harmony-start/hvd.jpg" alt="点开hdv manager"></p>
<div class="note info">
            <p>千万不要用谷歌浏览器</p>
          </div>

<h3 id="登录华为账号"><a href="#登录华为账号" class="headerlink" title="登录华为账号"></a>登录华为账号</h3><h3 id="选择电视模拟器"><a href="#选择电视模拟器" class="headerlink" title="选择电视模拟器"></a>选择电视模拟器</h3><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>点击右上方运行箭头，选择在电视模拟器上运行，即可显示hello world<br><img src="/posts/harmony-start/hello.jpg" alt="运行结果"></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>harmony</category>
      </categories>
      <tags>
        <tag>harmony</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue框架搭建的餐厅管理系统</title>
    <url>/posts/Vue-rest/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>使用系统前务必阅读本文件！如果没有安装好环境，可以直接访问<a href="https://rest.guoshaocong.cn/">餐厅管理系统</a>，功能与我们的代码是一致的。</p>
          </div>

<h2 id="餐厅管理系统"><a href="#餐厅管理系统" class="headerlink" title="餐厅管理系统"></a>餐厅管理系统</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>一个餐厅管理系统，前端由Vue框架进行开发，后端使用js，和数据库一起部署在阿里云上。</p>
<a id="more"></a>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li>用户正常登陆与登出</li>
<li>前台管理系统可以满足用户进行开台、买单与结账数据分析的需求</li>
<li>基础信息管理可以满足用户进行对餐品与餐桌的管理</li>
<li>服务管理部分可以满足用户进行点餐，开单，签单的需求</li>
<li>人员管理部分可以满足用户进行对顾客和员工的管理</li>
</ol>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>由于本系统后端部分部署在阿里云上，所以只需安装前端依赖</p>
<h3 id="安装Node-js，换源"><a href="#安装Node-js，换源" class="headerlink" title="安装Node.js，换源"></a>安装Node.js，换源</h3><ul>
<li>打开<a href="https://nodejs.org/en/">Node.js官网</a>，选择LTS版本下载（目前为12.16.1），并进行安装。</li>
<li>使用淘宝源：<code>npm config set registry https://registry.npm.taobao.org</code></li>
<li>验证换源是否成功：<code>npm config get registry</code></li>
</ul>
<h3 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h3><ul>
<li>安装：<code>npm install -g @vue/cli</code></li>
<li>验证：<code>vue --version</code></li>
</ul>
<h3 id="下载项目源码"><a href="#下载项目源码" class="headerlink" title="下载项目源码"></a>下载项目源码</h3><ul>
<li>使用git下载<br><code>git clone https://github.com/MofasJang/restaurant</code></li>
<li>访问<a href="https://github.com/MofasJang/restaurant">github仓库</a>下载</li>
</ul>
<h3 id="安装项目所需依赖"><a href="#安装项目所需依赖" class="headerlink" title="安装项目所需依赖"></a>安装项目所需依赖</h3><ul>
<li>确保终端位于frontend目录内</li>
<li><code>npm install</code>来按照package.json安装所有所需依赖</li>
</ul>
<h3 id="进行本地测试"><a href="#进行本地测试" class="headerlink" title="进行本地测试"></a>进行本地测试</h3><ul>
<li>运行开发服务器：<code>npm run serve</code></li>
<li>访问终端中显示的地址 <code>http://localhost:8080/</code> ，应该能看到前端页面。</li>
</ul>
<h2 id="为了方便于登陆，默认账号密码可以回车录入，点击登陆，就可以使用本系统了！"><a href="#为了方便于登陆，默认账号密码可以回车录入，点击登陆，就可以使用本系统了！" class="headerlink" title="为了方便于登陆，默认账号密码可以回车录入，点击登陆，就可以使用本系统了！"></a>为了方便于登陆，默认账号密码可以回车录入，点击登陆，就可以使用本系统了！</h2>]]></content>
      <categories>
        <category>frontend</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>晨午晚检自动填报工具</title>
    <url>/posts/chenwujian/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">
            <p>搬运自HPShark的<a href="https://github.com/HPShark/xdu_chenwuwanjian">github仓库</a></p>
          </div>

<h1 id="晨午晚检自动填报工具"><a href="#晨午晚检自动填报工具" class="headerlink" title="晨午晚检自动填报工具"></a>晨午晚检自动填报工具</h1><h4 id="本项目仅供学习交流使用，如作他用所承受的任何直接、间接法律责任一概与作者和搬运者无关"><a href="#本项目仅供学习交流使用，如作他用所承受的任何直接、间接法律责任一概与作者和搬运者无关" class="headerlink" title="本项目仅供学习交流使用，如作他用所承受的任何直接、间接法律责任一概与作者和搬运者无关"></a>本项目仅供学习交流使用，如作他用所承受的任何直接、间接法律责任一概与作者和搬运者无关</h4><h4 id="如果此项目侵犯了您或者您公司的权益，请立即联系我删除"><a href="#如果此项目侵犯了您或者您公司的权益，请立即联系我删除" class="headerlink" title="如果此项目侵犯了您或者您公司的权益，请立即联系我删除"></a>如果此项目侵犯了您或者您公司的权益，请立即联系我删除</h4><a id="more"></a>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>本脚本只内置了南校区的经纬度,<strong>只适用于南校区在校的同学</strong></p>
<h1 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h1><ul>
<li><code>data</code> 需要提交给网站的信息</li>
<li><code>AccountInfo.ini</code> 登录的配置文件，用来保存帐号密码以及收发邮箱信息和邮箱key（只支持QQ邮箱）</li>
<li><code>index.py</code> 完成自动提交的py脚本</li>
<li><code>utils</code> 帮助生成默认项配置的py脚本</li>
<li><code>requirements.txt</code> py依赖库以及版本说明文件</li>
<li><code>层文件.zip</code> 打包好的云函数依赖库文件</li>
</ul>
<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h3 id="配合腾讯云函数使用（免费）"><a href="#配合腾讯云函数使用（免费）" class="headerlink" title="配合腾讯云函数使用（免费）"></a>配合腾讯云函数使用（免费）</h3><ol>
<li><p>clone 或者 下载 此仓库到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;HPShark&#x2F;xdu_chenwuwanjian.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开本地仓库文件夹，配置<code>AccountInfo.ini</code>中对应的信息，<strong>注意这里的学号和密码都是教务系统的学号和密码，key是邮箱的密码</strong></p>
</li>
<li><p>打开百度搜索<a href="https://console.cloud.tencent.com/scf/index?rid=1">腾讯云函数</a>，注册认证后，进入控制台，点击左边的层，然后点新建，名称随意，然后点击上传zip，选择项目中的<code>层文件.zip</code>上传，然后选择运行环境<code>python3.6</code>，然后点击确定，耐心等待一下，上传依赖包需要花费的时间比较长 <a href="ceng.jpg">新建腾讯云函数依赖</a></p>
</li>
<li><p>点左边的函数服务，新建云函数，名称随意，运行环境选择<code>python3.6</code>，创建方式选择空白函数，然后点击下一步 <img src="/posts/chenwujian/hanshu.jpg" alt="新建腾讯云函数"></p>
</li>
<li><p>提交方法选择上传本地压缩包，把本地的/data，/utils，AccountInfo.ini，index.py，requirements.txt五个文件和文件夹打包上传，在点击下面的高级设置，设置内存为256M，超时时间为<code>30秒</code>，添加层为刚刚新建的函数依赖层，环境变量设置一个<code>TZ=Asia/Shanghai</code>，然后点击完成<img src="/posts/chenwujian/gaoji.jpg" alt="高级设置"></p>
</li>
<li><p>进入新建好的云函数，左边点击触发管理，点击创建触发器，名称随意，触发周期选择自定义，然后配置cron表达式。下面的表达式表示每天中午十二点整执行，可配置多个时间以便早中晚自动运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 0 12 * * * *</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后就可以测试云函数了，绿色代表云函数执行成功，红色代表云函数执行失败（失败的原因大部分是由于依赖造成的）。返回结果是<code>auto submit fail.</code>代表自动提交失败；返回结果是<code>auto submit success.</code>，代表自动提交成功，如遇到问题，请仔细查看日志</p>
</li>
<li><p>也可配合Windows计划任务或者使用linux定时任务，将脚本挂在自己的云服务器上，不会就搜索一下，过程不再赘述</p>
</li>
</ol>
<h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      <categories>
        <category>生活</category>
        <category>搬运</category>
      </categories>
      <tags>
        <tag>XDU</tag>
        <tag>自动工具</tag>
      </tags>
  </entry>
  <entry>
    <title>测试一下</title>
    <url>/posts/test/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2>
        <div id="aplayer-QNoLuzLZ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content">[ti:Something Just Like This]
[ar:The Chainsmokers/Coldplay]
[al:Something Just Like This]
[by:]
[offset:0]
[00:00.73]Something Just Like This (美国篮球联赛宣传片主题曲|第60届格莱美最佳流行对唱/组合提名歌曲) - The Chainsmokers/Coldplay
[00:02.13]Written by：Andrew Taggart/Christopher Martin/Guy Berryman/Jonny Buckland/Will Champion
[00:03.78]
[00:08.16]I've been reading books of old
[00:10.44]The legends and the myths
[00:12.79]Achilles and his gold
[00:15.10]Hercules and his gifts
[00:17.60]Spiderman's control
[00:19.88]And Batman with his fists
[00:22.20]
[00:22.82]And clearly I don't see myself upon that list
[00:26.46]She said where'd you wanna go
[00:28.98]How much you wanna risk
[00:31.25]I'm not looking for somebody
[00:33.41]With some Superhuman gifts
[00:36.08]Some Superhero
[00:37.78]
[00:38.39]Some fairytale bliss
[00:40.83]Just something I can turn to
[00:43.05]Somebody I can kiss
[00:45.12]I want something just like this
[00:47.69]Doo doo doo doo doo doo
[00:49.27]
[00:50.00]Doo doo doo doo doo
[00:51.59]
[00:52.40]Doo doo doo doo doo doo
[00:54.25]Oh I want something just like this
[00:56.99]Doo doo doo doo doo doo
[00:58.79]
[00:59.49]Doo doo doo doo doo
[01:01.16]
[01:01.69]Doo doo doo doo doo doo
[01:03.60]Oh I want something just like this
[01:06.31]
[01:13.20]I want something just like this
[01:15.78]
[01:22.85]I've been reading books of old
[01:24.52]
[01:25.03]The legends and the myths
[01:27.34]The testaments they told
[01:29.69]The moon and its eclipse
[01:32.04]And Superman unrolls
[01:34.38]A suit before he lifts
[01:36.64]
[01:37.69]But I'm not the kind of person that it fits
[01:40.92]She said where'd you wanna go
[01:43.75]How much you wanna risk
[01:45.79]I'm not looking for somebody
[01:48.04]With some Superhuman gifts
[01:50.57]Some Superhero
[01:52.28]
[01:52.93]Some fairytale bliss
[01:55.29]Just something I can turn to
[01:57.61]Somebody I can miss
[01:59.70]I want something just like this
[02:02.18]
[02:09.11]I want something just like this
[02:11.58]
[02:18.16]Oh I want something just like this
[02:21.18]Doo doo doo doo doo doo
[02:22.56]
[02:23.28]Doo doo doo doo doo
[02:24.85]
[02:25.53]Doo doo doo doo doo doo
[02:27.63]Oh I want something just like this
[02:30.23]Doo doo doo doo doo doo
[02:32.06]
[02:32.70]Doo doo doo doo doo
[02:34.87]Doo doo doo doo doo doo
[02:36.71]
[02:37.69]Where'd you wanna go
[02:39.62]How much you wanna risk
[02:41.59]I'm not looking for somebody
[02:44.00]With some Superhuman gifts
[02:46.59]Some Superhero
[02:48.68]Some fairytale bliss
[02:51.24]Just something I can turn to
[02:53.51]Somebody I can kiss
[02:55.59]I want something just like this
[02:58.18]
[03:14.04]Oh I want something just like this
[03:16.80]
[03:32.78]Oh I want something just like this
[03:35.50]
[03:51.44]Oh I want something just like this</pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-QNoLuzLZ"),
            narrow: false,
            autoplay: false,
            showlrc: 2,
            music: {
              title: "SomethingJustLikeThis",
              author: "The Chainsmokers/Coldplay",
              url: "http://qh04sczlg.hd-bkt.clouddn.com/SomethingJustLikeThis.mp3",
              pic: "/posts/test/SomethingJustLikeThis.jpg",
              lrc: "SomethingJustLikeThis.txt"
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>

<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><center><a class="btn" href="#" title="Title">
            <i class="fa fa-home fa-fw fa-lg"></i>按一下
          </a></center>

<a id="more"></a>
<h2 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h2><div class="note info">
            <p>default,primary,success,info,warning,danger</p>
          </div>

<h2 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h2><iframe src="http://qh04sczlg.hd-bkt.clouddn.com/jianli.pdf" width="100%" height="800px"></iframe>


<h2 id="iframe插件"><a href="#iframe插件" class="headerlink" title="iframe插件"></a>iframe插件</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure>
<iframe height="500" width="100%" src="http://qh04sczlg.hd-bkt.clouddn.com/gouge.mp4" frameborder="0" allowfullscreen>
</iframe>

]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket多人聊天室</title>
    <url>/posts/Socket-chatroom/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>作者：潘江涛<br><a href="https://github.com/MofasJang/Socket-chatroom">项目源码</a></p>
</blockquote>
<h3 id="一-项目简介"><a href="#一-项目简介" class="headerlink" title="一. 项目简介"></a>一. 项目简介</h3><p>​        使用java作为开发语言开发一款基于socket技术的多人聊天应用，该程序由服务端和客户端两个界面组成，其中客户端由聊天用户使用，发送聊天消息并接受服务端和其他客户端的消息；服务端由管理员使用，接受客户端的socket连接，转发各客户端发送的消息，也能够向客户端发送消息，并将所有消息存入数据库中，在界面上实时更新聊天记录。</p>
<a id="more"></a>


<h3 id="二-项目技术栈"><a href="#二-项目技术栈" class="headerlink" title="二. 项目技术栈"></a>二. 项目技术栈</h3><h4 id="1-java中Socket的使用"><a href="#1-java中Socket的使用" class="headerlink" title="1. java中Socket的使用"></a>1. java中Socket的使用</h4><h4 id="2-多线程接口Runnable的使用"><a href="#2-多线程接口Runnable的使用" class="headerlink" title="2. 多线程接口Runnable的使用"></a>2. 多线程接口Runnable的使用</h4><h4 id="3-SQL语言及JDBC的使用"><a href="#3-SQL语言及JDBC的使用" class="headerlink" title="3. SQL语言及JDBC的使用"></a>3. SQL语言及JDBC的使用</h4><h4 id="4-swing窗体程序的建立"><a href="#4-swing窗体程序的建立" class="headerlink" title="4. swing窗体程序的建立"></a>4. swing窗体程序的建立</h4><h3 id="三-项目参考资料"><a href="#三-项目参考资料" class="headerlink" title="三. 项目参考资料"></a>三. 项目参考资料</h3><h4 id="1-java中的Socket的使用"><a href="#1-java中的Socket的使用" class="headerlink" title="1. java中的Socket的使用"></a>1. <a href="https://blog.csdn.net/a78270528/article/details/80318571">java中的Socket的使用</a></h4><h4 id="2-java-多线程之-implements-Runnable"><a href="#2-java-多线程之-implements-Runnable" class="headerlink" title="2. java 多线程之 implements Runnable"></a>2. <a href="https://blog.csdn.net/qq_38428623/article/details/85868358">java 多线程之 implements Runnable</a></h4><h4 id="3-使用JAVA编程实现多人聊天室"><a href="#3-使用JAVA编程实现多人聊天室" class="headerlink" title="3. 使用JAVA编程实现多人聊天室"></a>3. <a href="https://blog.csdn.net/qq_29606255/article/details/78679815">使用JAVA编程实现多人聊天室</a></h4><h4 id="4-Eclipse搭建Java-Swing可视化开发环境"><a href="#4-Eclipse搭建Java-Swing可视化开发环境" class="headerlink" title="4. Eclipse搭建Java Swing可视化开发环境"></a>4. <a href="https://blog.csdn.net/renwudao24/article/details/51864323">Eclipse搭建Java Swing可视化开发环境</a></h4><h4 id="5-Java-MySQL-连接"><a href="#5-Java-MySQL-连接" class="headerlink" title="5. Java MySQL 连接"></a>5. <a href="https://www.runoob.com/java/java-mysql-connect.html">Java MySQL 连接</a></h4><h3 id="四-项目文件结构"><a href="#四-项目文件结构" class="headerlink" title="四. 项目文件结构"></a>四. 项目文件结构</h3><h4 id="socketchat-package"><a href="#socketchat-package" class="headerlink" title="* socketchat                  (package)"></a>* socketchat                  (package)</h4><ul>
<li>client.java            (客户端的socket连接，消息接收和发送)</li>
<li>clientapp.java     (客户端界面，显示其他客户端和服务端的消息)</li>
<li>server.java          (服务端的连接客户端socket，消息接收和转发)</li>
<li>serverapp.java    (服务端界面，显示所有客户端的消息和所有聊天记录)</li>
<li>sqltext.java          (连接数据库，存入和读取聊天记录)</li>
</ul>
<h3 id="五-项目代码描述"><a href="#五-项目代码描述" class="headerlink" title="五. 项目代码描述"></a>五. 项目代码描述</h3><h4 id="1-server-java-服务器转发线程"><a href="#1-server-java-服务器转发线程" class="headerlink" title="1. server.java 服务器转发线程"></a>1. server.java 服务器转发线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">server</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;<span class="comment">// 服务端</span></span><br><span class="line">    <span class="keyword">static</span> List&lt;Socket&gt; socketList=<span class="keyword">new</span> ArrayList&lt;Socket&gt;(); <span class="comment">//多个socket实现多人聊天</span></span><br><span class="line">    <span class="keyword">static</span> Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> JTextArea textArea1=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">static</span> String buffer=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">server</span><span class="params">()</span> </span>&#123;  <span class="comment">// 构造方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	serverapp.WinMain();</span><br><span class="line"><span class="comment">//        Scanner input = new Scanner(System.in);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;************服务端*************&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">200</span>);</span><br><span class="line">			sqltest.insert(<span class="string">&quot;服务器&quot;</span>,<span class="string">&quot;已上线&quot;</span>);</span><br><span class="line">			textArea1.append(<span class="string">&quot;*********************服务端*********************\n&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">        server t = <span class="keyword">new</span> server();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;   <span class="comment">//循环等待客户端连接       </span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span> + count + <span class="string">&quot;个客户已连接&quot;</span>);</span><br><span class="line">                textArea1.append(<span class="string">&quot;第&quot;</span> + count + <span class="string">&quot;个客户已连接\n&quot;</span>);</span><br><span class="line">                socketList.add(socket);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//开启转发线程和发消息线程</span></span><br><span class="line">            Print p = <span class="keyword">new</span> Print(socket);</span><br><span class="line">            Thread read = <span class="keyword">new</span> Thread(t);</span><br><span class="line">            Thread print = <span class="keyword">new</span> Thread(p);</span><br><span class="line">            read.start();</span><br><span class="line">            print.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setwin</span><span class="params">(JTextArea area1)</span> </span>&#123;<span class="comment">//将服务器界面的消息打印框赋值到server类中</span></span><br><span class="line">    	textArea1=area1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;		<span class="comment">// 重写run方法</span></span><br><span class="line">    	Socket current = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket</span><br><span class="line">                    .getInputStream()));</span><br><span class="line">            current=socket;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">//将接收的字符串保存到数据库中</span></span><br><span class="line">                String jieshou = in.readLine();</span><br><span class="line">                System.out.println(jieshou);</span><br><span class="line">                textArea1.append(jieshou+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                String[] neirong=jieshou.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                String buf1=neirong[<span class="number">0</span>],buf2;;</span><br><span class="line">                <span class="keyword">if</span>(neirong.length==<span class="number">1</span>) &#123; 	</span><br><span class="line">                	buf2=<span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                	buf2=neirong[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                sqltest.insert(buf1, buf2);</span><br><span class="line">                <span class="comment">//将消息转发给所有用户</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; socketList.size(); i++) &#123;</span><br><span class="line">                    Socket socket=socketList.get(i);</span><br><span class="line">                    PrintWriter out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">                    <span class="keyword">if</span> (socket!=current) &#123;</span><br><span class="line">                        out.println(jieshou);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        out.println(<span class="string">&quot;(你)&quot;</span>+jieshou);</span><br><span class="line">                    &#125;</span><br><span class="line">                    out.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        	socketList.remove(current);</span><br><span class="line">        	Print.socketList.remove(current);</span><br><span class="line">    		textArea1.append(<span class="string">&quot;用户已下线&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-server-java-服务器发送消息线程"><a href="#2-server-java-服务器发送消息线程" class="headerlink" title="2. server.java 服务器发送消息线程"></a>2. server.java 服务器发送消息线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Print</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Socket&gt; socketList=<span class="keyword">new</span> ArrayList&lt;Socket&gt;();</span><br><span class="line">    Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Print</span><span class="params">(Socket s)</span> </span>&#123;<span class="comment">// 构造方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socketList.add(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            	<span class="keyword">while</span>(server.buffer==<span class="string">&quot;&quot;</span>) &#123;  <span class="comment">//如没有消息需要发送，则循环等待</span></span><br><span class="line">            		<span class="keyword">try</span> &#123;</span><br><span class="line">        				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        				e.printStackTrace();</span><br><span class="line">        			&#125;</span><br><span class="line">            	&#125;</span><br><span class="line">            	String msg = server.buffer.replaceAll(<span class="string">&quot;(\r\n|\r|\n|\n\r)&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            	System.out.println(<span class="string">&quot;客户端数量：&quot;</span>+socketList.size());</span><br><span class="line">                <span class="comment">//向所有客户端发送服务器消息</span></span><br><span class="line">	            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; socketList.size(); i++) &#123;</span><br><span class="line">	                Socket socket=socketList.get(i);</span><br><span class="line">	                PrintWriter out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">	                out.println(<span class="string">&quot;服务器：&quot;</span>+msg);</span><br><span class="line">	                out.flush();</span><br><span class="line">	            &#125;</span><br><span class="line">	            System.out.println(<span class="string">&quot;服务器：&quot;</span>+msg);</span><br><span class="line">                server.textArea1.append(<span class="string">&quot;服务器：&quot;</span>+msg+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                sqltest.insert(<span class="string">&quot;服务器&quot;</span>, msg);</span><br><span class="line">	            server.buffer=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-client-java-客户端连接socket、发送消息线程"><a href="#3-client-java-客户端连接socket、发送消息线程" class="headerlink" title="3. client.java 客户端连接socket、发送消息线程"></a>3. client.java 客户端连接socket、发送消息线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">client</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;<span class="comment">// 客户端</span></span><br><span class="line">    <span class="keyword">static</span> Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">static</span> String name=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> JTextArea textArea=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> String buffer=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	clientapp.WinMain();</span><br><span class="line">    	<span class="keyword">while</span>(buffer==<span class="string">&quot;&quot;</span>) &#123; <span class="comment">//等待客户输入名字</span></span><br><span class="line">    		<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	name=buffer.replaceAll(<span class="string">&quot;(\r\n|\r|\n|\n\r)&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    	System.out.println(<span class="string">&quot;************客户端:&quot;</span>+client.name+<span class="string">&quot;*************&quot;</span>);</span><br><span class="line">    	textArea.append(<span class="string">&quot;**************************客户端:&quot;</span>+client.name+<span class="string">&quot;***************************\n&quot;</span>);</span><br><span class="line">    	buffer=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//连接服务器socket</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>);</span><br><span class="line">            PrintWriter out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">            out.println(name+<span class="string">&quot;:我已上线&quot;</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开启发送、接收消息线程</span></span><br><span class="line">        client t = <span class="keyword">new</span> client();</span><br><span class="line">        Read r = <span class="keyword">new</span> Read(socket);</span><br><span class="line">        Thread print = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        Thread read = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        print.start();</span><br><span class="line">        read.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setwin</span><span class="params">(JTextArea a1)</span> </span>&#123;<span class="comment">//将客户端界面的消息打印框赋值到client类中</span></span><br><span class="line">    	textArea=a1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);         </span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;<span class="comment">//等待用户输入消息</span></span><br><span class="line">            	<span class="keyword">while</span>(buffer==<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            		<span class="keyword">try</span> &#123;</span><br><span class="line">        				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        				e.printStackTrace();</span><br><span class="line">        			&#125;</span><br><span class="line">            	&#125;</span><br><span class="line">                <span class="comment">//发送消息</span></span><br><span class="line">        		String msg = buffer.replaceAll(<span class="string">&quot;(\r\n|\r|\n|\n\r)&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        		out.println(name+<span class="string">&quot;:&quot;</span>+msg);</span><br><span class="line">        		out.flush();</span><br><span class="line">        		buffer=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;<span class="comment">//用户下线，向服务器发送下线消息，关闭socket</span></span><br><span class="line">            	out.println(name+<span class="string">&quot;:已下线&quot;</span>);</span><br><span class="line">        		out.flush();</span><br><span class="line">        		Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-client-java-客户端接收消息线程"><a href="#4-client-java-客户端接收消息线程" class="headerlink" title="4. client.java 客户端接收消息线程"></a>4. client.java 客户端接收消息线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Read</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket</span><br><span class="line">                    .getInputStream()));</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;	<span class="comment">//接收到消息，打印在界面上</span></span><br><span class="line">            	String text=in.readLine() ;</span><br><span class="line">            	client.textArea.append(text+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            	System.out.println(text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-sqltext-java-连接数据库"><a href="#5-sqltext-java-连接数据库" class="headerlink" title="5. sqltext.java 连接数据库"></a>5. sqltext.java 连接数据库</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sqltest</span> </span>&#123;  <span class="comment">//连接数据库</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">&quot;jdbc:mysql://localhost:3306/chatroom?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> JTextArea textArea=<span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String buf1,String buf2)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<span class="comment">//设置日期格式</span></span><br><span class="line">        String curtime=df.format(<span class="keyword">new</span> Date());<span class="comment">// new Date()为获取当前系统时间</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 注册 JDBC 驱动</span></span><br><span class="line">            Class.forName(JDBC_DRIVER);</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 打开链接</span></span><br><span class="line">            conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行查询</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            String sql1;</span><br><span class="line">            <span class="comment">//将聊天人的名字、聊天内容和时间记入数据库</span></span><br><span class="line">            sql1 = <span class="string">&quot;insert into record (name,buf,time) values (\&#x27;&quot;</span>+buf1+<span class="string">&quot;\&#x27;, \&#x27;&quot;</span>+buf2+<span class="string">&quot;\&#x27;,\&#x27;&quot;</span>+curtime+<span class="string">&quot;\&#x27;)&quot;</span>;</span><br><span class="line">            stmt.executeUpdate(sql1);</span><br><span class="line">            String sql2;</span><br><span class="line">            <span class="comment">//查询数据库中所有聊天记录</span></span><br><span class="line">            sql2 = <span class="string">&quot;SELECT id,name, buf,time FROM record&quot;</span>;</span><br><span class="line">            ResultSet rs = stmt.executeQuery(sql2);</span><br><span class="line">            textArea.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 展开结果集数据库</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="comment">// 通过字段检索</span></span><br><span class="line">                String name  = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                String buf = rs.getString(<span class="string">&quot;buf&quot;</span>);</span><br><span class="line">                String time = rs.getString(<span class="string">&quot;time&quot;</span>);</span><br><span class="line">                </span><br><span class="line">                textArea.append(time+<span class="string">&quot;\n&quot;</span>+name+<span class="string">&quot; : &quot;</span>+buf+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 完成后关闭</span></span><br><span class="line">            rs.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">            <span class="comment">// 处理 JDBC 错误</span></span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 处理 Class.forName 错误</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>) stmt.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">            &#125;<span class="comment">// 什么都不做</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(conn!=<span class="keyword">null</span>) conn.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setwin</span><span class="params">(JTextArea area)</span> </span>&#123;</span><br><span class="line">    	textArea=area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-serverapp-java-clientapp-java-客户端和服务器界面主要由AWT-SWING可视化插件生成界面代码"><a href="#6-serverapp-java-clientapp-java-客户端和服务器界面主要由AWT-SWING可视化插件生成界面代码" class="headerlink" title="6. serverapp.java , clientapp.java 客户端和服务器界面主要由AWT/SWING可视化插件生成界面代码"></a>6. serverapp.java , clientapp.java 客户端和服务器界面主要由AWT/SWING可视化插件生成界面代码</h4><h3 id="六-项目成果截图"><a href="#六-项目成果截图" class="headerlink" title="六. 项目成果截图"></a>六. 项目成果截图</h3><h4 id="1-服务器初始化，调出所有聊天记录"><a href="#1-服务器初始化，调出所有聊天记录" class="headerlink" title="1. 服务器初始化，调出所有聊天记录"></a>1. 服务器初始化，调出所有聊天记录</h4><p><img src="/posts/Socket-chatroom/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%88%9D%E5%A7%8B.jpg"></p>
<h4 id="2-客户端初始化，需要输入名字"><a href="#2-客户端初始化，需要输入名字" class="headerlink" title="2. 客户端初始化，需要输入名字"></a>2. 客户端初始化，需要输入名字</h4><p><img src="/posts/Socket-chatroom/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%9D%E5%A7%8B.jpg"></p>
<h4 id="3-客户上线"><a href="#3-客户上线" class="headerlink" title="3. 客户上线"></a>3. 客户上线</h4><p><img src="/posts/Socket-chatroom/%E5%AE%A2%E6%88%B7%E4%B8%8A%E7%BA%BF.jpg"></p>
<h4 id="4-客户和服务器分别发送消息"><a href="#4-客户和服务器分别发送消息" class="headerlink" title="4. 客户和服务器分别发送消息"></a>4. 客户和服务器分别发送消息</h4><p><img src="/posts/Socket-chatroom/%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF.jpg"></p>
<h4 id="5-客户端下线"><a href="#5-客户端下线" class="headerlink" title="5. 客户端下线"></a>5. 客户端下线</h4><p><img src="/posts/Socket-chatroom/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8B%E7%BA%BF.jpg"></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
